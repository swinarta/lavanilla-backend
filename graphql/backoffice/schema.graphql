type Query {
    products: [Product!]
    product(id: ID!): Product
    draftOrderDesigner(status: DraftOrderStatus): [Order!]
    draftOrder(draftOrderId: ID!): Order!
    presignedUrlDesigner(draftOrderId: ID!, lineItemId: ID!, qty: Int!): [URL!]!
    downloadAssetsDesigner(draftOrderId: ID!): URL!
    downloadAssetsPrintOperator(orderId: ID!): URL!
}

type Mutation {
    draftOrderStart(id: ID!): Boolean!
    draftOrderComplete(id: ID!): Boolean!
    draftOrderAddProductVariant(id: ID!, variantId: String!, quantity: Int!): Order!
    draftOrderUpdateProductVariant(id: ID!, variantId: String!, quantity: Int!): Order!
}

enum DraftOrderStatus {
    OPEN
    COMPLETED
}

input LineItemInput {
    id: ID!
    quantity: Int!
}

type Order{
    id: ID!
    name: String!
    lineItems: [LineItem!]
}

type LineItem {
    product: Product!
    variant: ProductVariant
    quantity: Int!
    images: [URL!]
}

type Product {
    id: ID!
    title: String!
    description: String!
    priceRange: PriceRange
    images: [URL!]
    variants: [ProductVariant!]
}

type PriceRange {
    minVariantPrice: Float
    maxVariantPrice: Float
}

type ProductVariant {
    id: ID!
    title: String!
    sku: String!
    price: Float!
    image: [URL!]
}

scalar URL
