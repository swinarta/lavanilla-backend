type Query {
    products: [Product!]
    product(id: ID!): Product
    draftOrderDesigner(status: DraftOrderStatus): [Order!]
    draftOrder(draftOrderId: ID!): Order!
    presignedUrlDesigner(orderName: String!, sku: String!, qty: Int!): [URL!]!
    downloadAssetsDesigner(draftOrderId: ID!): URL!

    # print operator
    orderPrintOperator: [Order!]
    order(orderId: ID!): Order!
    downloadAssetsPrintOperator(orderId: ID!, sku: String): URL!
}

type Mutation {
    draftOrderStart(draftOrderId: ID!): Boolean!
    draftOrderComplete(draftOrderId: ID!): Order!
    draftOrderAddProductVariant(draftOrderId: ID!, variantId: String!, quantity: Int!): Order!
    draftOrderUpdateProductVariant(draftOrderId: ID!, variantId: String!, quantity: Int!): Order!
    draftOrderAddNoteProductVariantDesigner(draftOrderId: ID!, variantId: String!, note: String!): Boolean!
}

enum DraftOrderStatus {
    OPEN
    COMPLETED
}

input LineItemInput {
    id: ID!
    quantity: Int!
}

type Order{
    id: ID!
    name: String!
    lineItems: [LineItem!]
    timelines: [Timeline!]
    createdAt: Time!
    customer: Customer!
}

type Customer {
    name: String!
}

type Timeline {
    eventAt: Time!
    action: EventAction!
}

enum EventAction {
    DRAFT_ORDER_CREATED
    DESIGNER_START
    DESIGNER_END
}

scalar URL
scalar Time
