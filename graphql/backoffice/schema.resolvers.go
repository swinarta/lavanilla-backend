package self_service

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.79

import (
	"context"
	"errors"
	"lavanilla/graphql/backoffice/model"
	"lavanilla/service/custom"
	"lavanilla/service/shopify"

	"github.com/samber/lo"
)

// DraftOrderComplete is the resolver for the draftOrderComplete field.
func (r *mutationResolver) DraftOrderComplete(ctx context.Context, id string) (bool, error) {
	_, err := r.ShopifyClient.DraftOrderComplete(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// DraftOrderAddProductVariant is the resolver for the draftOrderAddProductVariant field.
func (r *mutationResolver) DraftOrderAddProductVariant(ctx context.Context, id string, variantID string, quantity int) (*model.Order, error) {
	order, err := r.ShopifyClient.GetDraftOrder(ctx, id)
	if err != nil {
		return nil, err
	}
	_, found := lo.Find(order.DraftOrder.LineItems.Nodes, func(item shopify.GetDraftOrderDraftOrderLineItemsDraftOrderLineItemConnectionNodesDraftOrderLineItem) bool {
		return item.Variant.Id == variantID
	})

	if found {
		return nil, errors.New("variant already exists")
	}

	existingLineItems := lo.Map(order.DraftOrder.LineItems.Nodes, func(item shopify.GetDraftOrderDraftOrderLineItemsDraftOrderLineItemConnectionNodesDraftOrderLineItem, _ int) custom.DraftOrderLineItemInput {
		return custom.DraftOrderLineItemInput{
			Quantity:  item.Quantity,
			VariantId: item.Variant.Id,
		}
	})

	newLineItems := append(existingLineItems, custom.DraftOrderLineItemInput{
		Quantity:  quantity,
		VariantId: variantID,
	})

	_, err = r.CustomClient.DraftOrderUpdateLineItems(ctx, id, newLineItems)
	if err != nil {
		return nil, err
	}

	return &model.Order{
		ID:   order.DraftOrder.Id,
		Name: order.DraftOrder.Name,
	}, nil
}

// DraftOrderUpdateProductVariant is the resolver for the draftOrderUpdateProductVariant field.
func (r *mutationResolver) DraftOrderUpdateProductVariant(ctx context.Context, id string, variantID string, quantity int) (*model.Order, error) {
	order, err := r.ShopifyClient.GetDraftOrder(ctx, id)
	if err != nil {
		return nil, err
	}
	_, found := lo.Find(order.DraftOrder.LineItems.Nodes, func(item shopify.GetDraftOrderDraftOrderLineItemsDraftOrderLineItemConnectionNodesDraftOrderLineItem) bool {
		return item.Variant.Id == variantID
	})

	if !found && quantity > 0 {
		return nil, errors.New("variant does not exist")
	}

	if !found && quantity == 0 {
		return &model.Order{
			ID:   order.DraftOrder.Id,
			Name: order.DraftOrder.Name,
		}, nil
	}

	newLineItems := lo.FilterMap(order.DraftOrder.LineItems.Nodes, func(item shopify.GetDraftOrderDraftOrderLineItemsDraftOrderLineItemConnectionNodesDraftOrderLineItem, _ int) (custom.DraftOrderLineItemInput, bool) {
		if item.Variant.Id == variantID && quantity == 0 {
			return custom.DraftOrderLineItemInput{
				Quantity:  quantity,
				VariantId: item.Variant.Id,
			}, false
		}

		if item.Variant.Id == variantID {
			return custom.DraftOrderLineItemInput{
				Quantity:  quantity,
				VariantId: item.Variant.Id,
			}, true
		}
		return custom.DraftOrderLineItemInput{
			Quantity:  item.Quantity,
			VariantId: item.Variant.Id,
		}, true
	})

	_, err = r.CustomClient.DraftOrderUpdateLineItems(ctx, id, newLineItems)
	if err != nil {
		return nil, err
	}

	return &model.Order{
		ID:   order.DraftOrder.Id,
		Name: order.DraftOrder.Name,
	}, nil
}

// DraftOrderDesigner is the resolver for the draftOrderDesigner field.
func (r *queryResolver) DraftOrderDesigner(ctx context.Context, status *model.DraftOrderStatus) ([]*model.Order, error) {
	orders, err := r.ShopifyClient.GetDraftOrders(ctx, lo.ToPtr("DESAINER"), status)
	if err != nil {
		return nil, err
	}
	return lo.Map(orders.DraftOrders.Nodes, func(item shopify.GetDraftOrdersDraftOrdersDraftOrderConnectionNodesDraftOrder, _ int) *model.Order {
		return &model.Order{
			ID:   item.Id,
			Name: item.Name,
		}
	}), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
