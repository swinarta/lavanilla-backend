package self_service

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"archive/zip"
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"lavanilla/graphql/backoffice/model"
	"lavanilla/service/custom"
	"lavanilla/service/shopify"
	"log"
	"path"
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/samber/lo"
)

// DraftOrderComplete is the resolver for the draftOrderComplete field.
func (r *mutationResolver) DraftOrderComplete(ctx context.Context, id string) (bool, error) {
	_, err := r.ShopifyClient.DraftOrderComplete(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// DraftOrderAddProductVariant is the resolver for the draftOrderAddProductVariant field.
func (r *mutationResolver) DraftOrderAddProductVariant(ctx context.Context, id string, variantID string, quantity int) (*model.Order, error) {
	order, err := r.ShopifyClient.GetDraftOrder(ctx, id)
	if err != nil {
		return nil, err
	}
	_, found := lo.Find(order.DraftOrder.LineItems.Nodes, func(item shopify.GetDraftOrderDraftOrderLineItemsDraftOrderLineItemConnectionNodesDraftOrderLineItem) bool {
		return item.Variant.Id == variantID
	})

	if found {
		return nil, errors.New("variant already exists")
	}

	existingLineItems := lo.Map(order.DraftOrder.LineItems.Nodes, func(item shopify.GetDraftOrderDraftOrderLineItemsDraftOrderLineItemConnectionNodesDraftOrderLineItem, _ int) custom.DraftOrderLineItemInput {
		return custom.DraftOrderLineItemInput{
			Quantity:  item.Quantity,
			VariantId: item.Variant.Id,
		}
	})

	newLineItems := append(existingLineItems, custom.DraftOrderLineItemInput{
		Quantity:  quantity,
		VariantId: variantID,
	})

	_, err = r.CustomClient.DraftOrderUpdateLineItems(ctx, id, newLineItems)
	if err != nil {
		return nil, err
	}

	return &model.Order{
		ID:   order.DraftOrder.Id,
		Name: order.DraftOrder.Name,
	}, nil
}

// DraftOrderUpdateProductVariant is the resolver for the draftOrderUpdateProductVariant field.
func (r *mutationResolver) DraftOrderUpdateProductVariant(ctx context.Context, id string, variantID string, quantity int) (*model.Order, error) {
	order, err := r.ShopifyClient.GetDraftOrder(ctx, id)
	if err != nil {
		return nil, err
	}
	_, found := lo.Find(order.DraftOrder.LineItems.Nodes, func(item shopify.GetDraftOrderDraftOrderLineItemsDraftOrderLineItemConnectionNodesDraftOrderLineItem) bool {
		return item.Variant.Id == variantID
	})

	if !found && quantity > 0 {
		return nil, errors.New("variant does not exist")
	}

	if !found && quantity == 0 {
		return &model.Order{
			ID:   order.DraftOrder.Id,
			Name: order.DraftOrder.Name,
		}, nil
	}

	newLineItems := lo.FilterMap(order.DraftOrder.LineItems.Nodes, func(item shopify.GetDraftOrderDraftOrderLineItemsDraftOrderLineItemConnectionNodesDraftOrderLineItem, _ int) (custom.DraftOrderLineItemInput, bool) {
		if item.Variant.Id == variantID && quantity == 0 {
			return custom.DraftOrderLineItemInput{
				Quantity:  quantity,
				VariantId: item.Variant.Id,
			}, false
		}

		if item.Variant.Id == variantID {
			return custom.DraftOrderLineItemInput{
				Quantity:  quantity,
				VariantId: item.Variant.Id,
			}, true
		}
		return custom.DraftOrderLineItemInput{
			Quantity:  item.Quantity,
			VariantId: item.Variant.Id,
		}, true
	})

	_, err = r.CustomClient.DraftOrderUpdateLineItems(ctx, id, newLineItems)
	if err != nil {
		return nil, err
	}

	return &model.Order{
		ID:   order.DraftOrder.Id,
		Name: order.DraftOrder.Name,
	}, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// DraftOrderDesigner is the resolver for the draftOrderDesigner field.
func (r *queryResolver) DraftOrderDesigner(ctx context.Context, status *model.DraftOrderStatus) ([]*model.Order, error) {
	orders, err := r.ShopifyClient.GetDraftOrders(ctx, lo.ToPtr("DESAINER"), status)
	if err != nil {
		return nil, err
	}
	return lo.Map(orders.DraftOrders.Nodes, func(item shopify.GetDraftOrdersDraftOrdersDraftOrderConnectionNodesDraftOrder, _ int) *model.Order {
		return &model.Order{
			ID:   item.Id,
			Name: item.Name,
		}
	}), nil
}

// PresignedURLDesigner is the resolver for the presignedUrlDesigner field.
func (r *queryResolver) PresignedURLDesigner(ctx context.Context, draftOrderID string, variantID string, qty int) ([]string, error) {
	bucket := "la-vanilla-draft-order-dev"
	filename := fmt.Sprintf("%s/ppp.jpeg", draftOrderID)
	object, err := r.S3PresignClient.PresignPutObject(ctx, &s3.PutObjectInput{
		Bucket:      aws.String(bucket),
		ContentType: aws.String("image/jpeg"),
		Key:         aws.String(filename),
	}, func(options *s3.PresignOptions) {
		options.Expires = 15 * time.Minute
	})
	if err != nil {
		return nil, err
	}

	return []string{object.URL}, err
}

// DownloadAssetsDesigner is the resolver for the downloadAssetsDesigner field.
func (r *queryResolver) DownloadAssetsDesigner(ctx context.Context, draftOrderID string) (string, error) {
	const bucket = "la-vanilla-self-service-dev"
	type fileData struct {
		Key  string
		Data []byte
		Err  error
	}
	resp, err := r.S3Client.ListObjectsV2(ctx, &s3.ListObjectsV2Input{
		Bucket: aws.String(bucket),
		Prefix: aws.String(draftOrderID),
	})
	if err != nil {
		return "", errors.New(fmt.Sprintf("failed to list objects: %v", err))
	}

	if len(resp.Contents) <= 0 {
		return "", errors.New("no assets to download")
	}

	results := make(chan fileData)
	var wg sync.WaitGroup
	for _, content := range resp.Contents {
		wg.Add(1)

		go func(content types.Object) {
			defer wg.Done()
			obj, err := r.S3Client.GetObject(ctx, &s3.GetObjectInput{
				Bucket: aws.String(bucket),
				Key:    content.Key,
			})
			if err != nil {
				log.Printf("failed to get object %s: %v\n", *content.Key, err)
				results <- fileData{Key: *content.Key, Err: err}
				return
			}
			defer obj.Body.Close()

			buf := new(bytes.Buffer)
			_, err = io.Copy(buf, obj.Body)
			if err != nil {
				results <- fileData{Key: *content.Key, Err: err}
				return
			}
			results <- fileData{Key: *content.Key, Data: buf.Bytes()}
		}(content)
	}

	go func() {
		wg.Wait()
		close(results)
	}()

	var zipBuf bytes.Buffer
	zipWriter := zip.NewWriter(&zipBuf)

	for result := range results {
		if result.Err != nil {
			log.Printf("failed to download %s: %v\n", result.Key, result.Err)
			continue
		}

		fw, err := zipWriter.Create(path.Base(result.Key))
		if err != nil {
			log.Printf("failed to create zip entry: %v", err)
			continue
		}

		_, err = fw.Write(result.Data)
		if err != nil {
			log.Printf("failed to write %s to zip: %v\n", result.Key, err)
			continue
		}
	}

	if err := zipWriter.Close(); err != nil {
		return "nil", errors.New(fmt.Sprintf("failed to close zip writer: %v", err))
	}

	const uploadBucket = "la-vanilla-temp-dev"
	zipKey := fmt.Sprintf("%s.zip", draftOrderID)
	_, err = r.S3Client.PutObject(ctx, &s3.PutObjectInput{
		Bucket: aws.String(uploadBucket),
		Key:    aws.String(zipKey),
		Body:   bytes.NewReader(zipBuf.Bytes()),
	})
	if err != nil {
		return "", errors.New(fmt.Sprintf("failed to upload zip to s3: %v", err))
	}

	object, err := r.S3PresignClient.PresignGetObject(ctx, &s3.GetObjectInput{
		Bucket: aws.String(uploadBucket),
		Key:    aws.String(zipKey),
	}, func(opts *s3.PresignOptions) {
		opts.Expires = 15 * time.Minute // URL valid for 15 minutes
	})
	if err != nil {
		return "", errors.New(fmt.Sprintf("failed to presign url: %v", err))
	}
	return object.URL, nil
}

// DownloadAssetsPrintOperator is the resolver for the downloadAssetsPrintOperator field.
func (r *queryResolver) DownloadAssetsPrintOperator(ctx context.Context, orderID string) (string, error) {
	panic(fmt.Errorf("not implemented: DownloadAssetsPrintOperator - downloadAssetsPrintOperator"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
