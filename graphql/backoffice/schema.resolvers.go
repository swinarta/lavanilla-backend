package backoffice

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"lavanilla/graphql/backoffice/model"
	"lavanilla/service"
	"lavanilla/service/metadata"
	"lavanilla/service/shopify"
	"lavanilla/utils"
	"log"
	"net/url"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/samber/lo"
)

// DraftOrderStart is the resolver for the draftOrderStart field.
func (r *mutationResolver) DraftOrderStart(ctx context.Context, id string) (bool, error) {
	var designerJob *metadata.DesignerJob
	_, err := r.ShopifyClient.GetDraftOrderMetaField(ctx, id, metadata.DesignerKeyName, &designerJob)
	if err != nil {
		return false, err
	}

	if designerJob != nil && designerJob.StartAt != nil {
		return false, errors.New(fmt.Sprintf("meta fields %s are not empty", metadata.DesignerKeyName))
	}

	now := time.Now()
	job := metadata.DesignerJob{
		StartAt: lo.ToPtr(now),
		EndAt:   nil,
	}

	marshal, _ := json.Marshal(job)
	m, err := r.ShopifyClient.MetaDataAdd(ctx, id, metadata.DesignerKeyName, marshal)
	if err != nil {
		return false, err
	}
	if len(m.MetafieldsSet.UserErrors) > 0 {
		return false, errors.New(string(m.MetafieldsSet.UserErrors[0].Code))
	}

	_, err = r.ShopifyClient.TimestampAdd(ctx, id, metadata.Timeline{
		Timestamp: now,
		Action:    "DESIGNER_START",
	})
	if err != nil {
		return false, err
	}

	tag, err := r.ShopifyClient.AddTag(ctx, id, metadata.DesignerInProgressKeyName)
	if err != nil {
		return false, err
	}
	if len(tag.TagsAdd.UserErrors) > 0 {
		return false, errors.New(tag.TagsAdd.UserErrors[0].Message)
	}

	return true, nil
}

// DraftOrderComplete is the resolver for the draftOrderComplete field.
func (r *mutationResolver) DraftOrderComplete(ctx context.Context, id string) (bool, error) {
	return r.DraftOrderHandler.DraftOrderComplete(ctx, id)
}

// DraftOrderAddProductVariant is the resolver for the draftOrderAddProductVariant field.
func (r *mutationResolver) DraftOrderAddProductVariant(ctx context.Context, id string, variantID string, quantity int) (*model.Order, error) {
	return r.DraftOrderProductVariantHandler.Add(ctx, id, variantID, quantity)
}

// DraftOrderUpdateProductVariant is the resolver for the draftOrderUpdateProductVariant field.
func (r *mutationResolver) DraftOrderUpdateProductVariant(ctx context.Context, id string, variantID string, quantity int) (*model.Order, error) {
	return r.DraftOrderProductVariantHandler.Update(ctx, id, variantID, quantity)
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	productConn, err := r.ShopifyClient.GetProductsSelfService(ctx)
	if err != nil {
		return nil, err
	}
	var result []*model.Product
	for _, product := range productConn.Products.Edges {
		maxPrice, err := strconv.ParseFloat(product.Node.PriceRangeV2.MaxVariantPrice.Amount, 64)
		if err != nil {
			return nil, err
		}
		minPrice, err := strconv.ParseFloat(product.Node.PriceRangeV2.MinVariantPrice.Amount, 64)
		if err != nil {
			return nil, err
		}
		result = append(result, &model.Product{
			ID:          product.Node.Id,
			Title:       product.Node.Title,
			Description: product.Node.Description,
			PriceRange: &model.PriceRange{
				MaxVariantPrice: &maxPrice,
				MinVariantPrice: &minPrice,
			},
			Images: lo.Map(product.Node.Media.Nodes, func(imageEdge shopify.GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia, _ int) string {
				return imageEdge.GetPreview().Image.Url
			}),
		})
	}
	return result, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	productResp, err := r.ShopifyClient.GetProduct(ctx, id)
	if err != nil {
		return nil, err
	}
	return &model.Product{
		ID:          id,
		Description: productResp.Product.Description,
		Images: lo.Map(productResp.Product.Media.Nodes, func(imageEdge shopify.GetProductProductMediaMediaConnectionNodesMedia, _ int) string {
			return imageEdge.GetPreview().Image.Url
		}),
		Variants: lo.Map(productResp.Product.Variants.Nodes, func(variantEdge shopify.GetProductProductVariantsProductVariantConnectionNodesProductVariant, _ int) *model.ProductVariant {
			price, err := strconv.ParseFloat(variantEdge.Price, 64)
			if err != nil {
				price = 0
			}
			return &model.ProductVariant{
				ID:    variantEdge.Id,
				Title: variantEdge.Title,
				Sku:   variantEdge.Sku,
				Price: price,
			}
		}),
	}, nil
}

// DraftOrderDesigner is the resolver for the draftOrderDesigner field.
func (r *queryResolver) DraftOrderDesigner(ctx context.Context, status *model.DraftOrderStatus) ([]*model.Order, error) {
	orders, err := r.ShopifyClient.GetDraftOrders(ctx, lo.ToPtr("DESAINER"), status)
	if err != nil {
		return nil, err
	}
	return lo.Map(orders.DraftOrders.Nodes, func(item shopify.GetDraftOrdersDraftOrdersDraftOrderConnectionNodesDraftOrder, _ int) *model.Order {
		return &model.Order{
			ID:        item.Id,
			Name:      item.Name,
			CreatedAt: item.CreatedAt,
			Customer:  &model.Customer{Name: item.Customer.DisplayName},
		}
	}), nil
}

// DraftOrder is the resolver for the draftOrder field.
func (r *queryResolver) DraftOrder(ctx context.Context, draftOrderID string) (*model.Order, error) {
	_, draftOrderID, err := utils.ExtractIDWithDraftOrderPrefix(draftOrderID)
	if err != nil {
		return nil, err
	}

	order, err := r.ShopifyClient.GetDraftOrder(ctx, draftOrderID)
	if err != nil {
		return nil, err
	}

	s3resp, err := r.S3Client.ListObjectsV2(ctx, &s3.ListObjectsV2Input{
		Bucket: aws.String(service.S3BucketOrder),
		Prefix: aws.String(order.DraftOrder.Name),
	})
	if err != nil {
		return nil, errors.New(fmt.Sprintf("failed to list objects: %v", err))
	}

	objectMap := make(map[string][]string)
	for _, content := range s3resp.Contents {
		parts := strings.Split(*content.Key, "/")
		if len(parts) < 2 {
			continue
		}
		key := parts[1]
		objectMap[key] = append(objectMap[key], *content.Key)
	}

	fields := graphql.CollectFieldsCtx(ctx, nil)
	collectTimelines := false
	for _, field := range fields {
		if field.Name == "timelines" {
			collectTimelines = true
		}
	}

	var timelineData []metadata.Timeline
	if collectTimelines {
		timelineData, err = r.ShopifyClient.GetDraftOrderTimeline(ctx, draftOrderID)
		if err != nil {
			return nil, err
		}
	}

	return &model.Order{
		ID:   order.DraftOrder.Id,
		Name: order.DraftOrder.Name,
		LineItems: lo.Map(order.DraftOrder.LineItems.Nodes, func(item shopify.GetDraftOrderDraftOrderLineItemsDraftOrderLineItemConnectionNodesDraftOrderLineItem, _ int) *model.LineItem {
			foundImages, _ := objectMap[item.Sku]
			variantPrice, _ := strconv.ParseFloat(item.Variant.Price, 64)
			return &model.LineItem{
				Product: &model.Product{
					ID:    item.Id,
					Title: item.Title,
				},
				Quantity: item.Quantity,
				Variant: &model.ProductVariant{
					ID:    item.Variant.Id,
					Title: item.Variant.Title,
					Sku:   item.Variant.Sku,
					Price: variantPrice,
					Image: []string{item.Variant.Image.Url},
				},
				UploadedImages: lo.Map(foundImages, func(item string, _ int) string {
					return fmt.Sprintf("%s/%s", service.CdnOrder, url.QueryEscape(item))
				}),
			}
		}),
		Timelines: lo.Map(timelineData, func(item metadata.Timeline, _ int) *model.Timeline {
			return &model.Timeline{
				EventAt: item.Timestamp,
				Action:  model.EventAction(item.Action),
			}
		}),
	}, nil
}

// PresignedURLDesigner is the resolver for the presignedUrlDesigner field.
func (r *queryResolver) PresignedURLDesigner(ctx context.Context, orderName string, sku string, qty int) ([]string, error) {
	var result []string
	for i := 0; i < qty; i++ {
		filename := fmt.Sprintf("%s/%s/%d.jpeg", orderName, sku, time.Now().Unix()+1)
		object, err := r.S3PresignClient.PresignPutObject(ctx, &s3.PutObjectInput{
			Bucket:      aws.String(service.S3BucketOrder),
			ContentType: aws.String("image/jpeg"),
			Key:         aws.String(filename),
		}, func(options *s3.PresignOptions) {
			options.Expires = 15 * time.Minute
		})
		if err != nil {
			return nil, err
		}
		result = append(result, object.URL)
	}
	return result, nil
}

// DownloadAssetsDesigner is the resolver for the downloadAssetsDesigner field.
func (r *queryResolver) DownloadAssetsDesigner(ctx context.Context, draftOrderID string) (string, error) {
	result, err := r.DraftOrderHandler.DownloadAssetsDesigner(ctx, draftOrderID)
	if err != nil {
		return "", err
	}
	return *result, nil
}

// OrderPrintOperator is the resolver for the orderPrintOperator field.
func (r *queryResolver) OrderPrintOperator(ctx context.Context) ([]*model.Order, error) {
	orders, err := r.ShopifyClient.GetOrders(ctx)
	if err != nil {
		return nil, err
	}
	return lo.Map(orders.Orders.Nodes, func(item shopify.GetOrdersOrdersOrderConnectionNodesOrder, _ int) *model.Order {
		return &model.Order{
			ID:        item.Id,
			Name:      item.Name,
			CreatedAt: item.CreatedAt,
			Customer: &model.Customer{
				Name: item.Customer.DisplayName,
			},
		}
	}), nil
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, orderID string) (*model.Order, error) {
	order, err := r.ShopifyClient.GetOrder(ctx, orderID)
	if err != nil {
		return nil, err
	}

	return &model.Order{
		ID:        order.Order.Id,
		Name:      order.Order.Name,
		CreatedAt: order.Order.CreatedAt,
		Customer: &model.Customer{
			Name: order.Order.Customer.DisplayName,
		},
		LineItems: lo.Map(order.Order.LineItems.Nodes, func(item shopify.GetOrderOrderLineItemsLineItemConnectionNodesLineItem, _ int) *model.LineItem {
			return &model.LineItem{
				Quantity: item.Quantity,
				Product: &model.Product{
					ID:    item.Product.Id,
					Title: item.Product.Title,
				},
				Variant: &model.ProductVariant{
					ID:  item.Id,
					Sku: item.Sku,
				},
			}
		}),
	}, nil
}

// DownloadAssetsPrintOperator is the resolver for the downloadAssetsPrintOperator field.
func (r *queryResolver) DownloadAssetsPrintOperator(ctx context.Context, orderID string) (string, error) {
	orderID, globalOrderID, err := utils.ExtractIDWithOrderPrefix(orderID)
	if err != nil {
		return "", err
	}

	resp, err := r.S3Client.ListObjectsV2(ctx, &s3.ListObjectsV2Input{
		Bucket: aws.String(service.S3BucketOrder),
		Prefix: aws.String(orderID),
	})
	if err != nil {
		return "", errors.New(fmt.Sprintf("failed to list objects: %v", err))
	}

	if len(resp.Contents) <= 0 {
		return "", errors.New("no assets to download")
	}

	order, err := r.ShopifyClient.GetOrder(ctx, globalOrderID)
	if err != nil {
		return "", err
	}

	orderName := order.Order.Name
	results := make(chan utils.FileData)
	var wg sync.WaitGroup
	for _, content := range resp.Contents {
		wg.Add(1)

		go func(content types.Object) {
			defer wg.Done()
			obj, err := r.S3Client.GetObject(ctx, &s3.GetObjectInput{
				Bucket: aws.String(service.S3BucketOrder),
				Key:    content.Key,
			})
			if err != nil {
				log.Printf("failed to get object %s: %v\n", *content.Key, err)
				results <- utils.FileData{Key: *content.Key, Err: err}
				return
			}
			defer obj.Body.Close()

			buf := new(bytes.Buffer)
			_, err = io.Copy(buf, obj.Body)
			if err != nil {
				results <- utils.FileData{Key: *content.Key, Err: err}
				return
			}
			// replace order id with short order name
			filename := *content.Key
			parts := strings.Split(filename, "/")
			if len(parts) > 0 {
				parts[0] = orderName
			}
			results <- utils.FileData{Key: strings.Join(parts, "/"), Data: buf.Bytes()}
		}(content)
	}

	go func() {
		wg.Wait()
		close(results)
	}()

	urlResp, err := utils.CreateZipArchive(ctx, orderID, r.S3Client, r.S3PresignClient, results)
	if err != nil {
		return "", fmt.Errorf("failed to create zip archive: %w", err)
	}

	return *urlResp, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
