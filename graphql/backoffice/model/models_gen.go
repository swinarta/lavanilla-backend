// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Customer struct {
	Name string `json:"name"`
}

type LineItem struct {
	Product        *Product        `json:"product"`
	Variant        *ProductVariant `json:"variant,omitempty"`
	Quantity       int             `json:"quantity"`
	UploadedImages []string        `json:"uploadedImages,omitempty"`
	DesignerNote   *string         `json:"designerNote,omitempty"`
}

type LineItemInput struct {
	ID       string `json:"id"`
	Quantity int    `json:"quantity"`
}

type Mutation struct {
}

type Order struct {
	ID        string      `json:"id"`
	Name      string      `json:"name"`
	LineItems []*LineItem `json:"lineItems,omitempty"`
	Timelines []*Timeline `json:"timelines,omitempty"`
	CreatedAt time.Time   `json:"createdAt"`
	Customer  *Customer   `json:"customer"`
}

type PriceRange struct {
	MinVariantPrice *float64 `json:"minVariantPrice,omitempty"`
	MaxVariantPrice *float64 `json:"maxVariantPrice,omitempty"`
}

type Product struct {
	ID          string            `json:"id"`
	Title       string            `json:"title"`
	Description string            `json:"description"`
	PriceRange  *PriceRange       `json:"priceRange,omitempty"`
	Images      []string          `json:"images,omitempty"`
	Variants    []*ProductVariant `json:"variants,omitempty"`
}

type ProductVariant struct {
	ID    string   `json:"id"`
	Title string   `json:"title"`
	Sku   string   `json:"sku"`
	Price float64  `json:"price"`
	Image []string `json:"image,omitempty"`
}

type Query struct {
}

type Timeline struct {
	EventAt time.Time   `json:"eventAt"`
	Action  EventAction `json:"action"`
}

type DraftOrderStatus string

const (
	DraftOrderStatusOpen      DraftOrderStatus = "OPEN"
	DraftOrderStatusCompleted DraftOrderStatus = "COMPLETED"
)

var AllDraftOrderStatus = []DraftOrderStatus{
	DraftOrderStatusOpen,
	DraftOrderStatusCompleted,
}

func (e DraftOrderStatus) IsValid() bool {
	switch e {
	case DraftOrderStatusOpen, DraftOrderStatusCompleted:
		return true
	}
	return false
}

func (e DraftOrderStatus) String() string {
	return string(e)
}

func (e *DraftOrderStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DraftOrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DraftOrderStatus", str)
	}
	return nil
}

func (e DraftOrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DraftOrderStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DraftOrderStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type EventAction string

const (
	EventActionDraftOrderCreated EventAction = "DRAFT_ORDER_CREATED"
	EventActionDesignerStart     EventAction = "DESIGNER_START"
	EventActionDesignerEnd       EventAction = "DESIGNER_END"
)

var AllEventAction = []EventAction{
	EventActionDraftOrderCreated,
	EventActionDesignerStart,
	EventActionDesignerEnd,
}

func (e EventAction) IsValid() bool {
	switch e {
	case EventActionDraftOrderCreated, EventActionDesignerStart, EventActionDesignerEnd:
		return true
	}
	return false
}

func (e EventAction) String() string {
	return string(e)
}

func (e *EventAction) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventAction", str)
	}
	return nil
}

func (e EventAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *EventAction) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e EventAction) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
