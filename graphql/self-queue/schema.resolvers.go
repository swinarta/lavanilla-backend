package self_service

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
)

// PresignedURL is the resolver for the presignedUrl field.
func (r *queryResolver) PresignedURL(ctx context.Context, draftOrderID string, uploadToken string, qty int) ([]string, error) {
	const bucket = "la-vanilla-self-service-dev"
	hash := sha256.Sum256([]byte(draftOrderID))
	token := hex.EncodeToString(hash[:])

	if token != uploadToken {
		return nil, errors.New("invalid token")
	}

	var result []string
	for i := 0; i < qty; i++ {
		filename := fmt.Sprintf("%s/%d", draftOrderID, time.Now().Unix())
		object, err := r.S3PresignClient.PresignPutObject(ctx, &s3.PutObjectInput{
			Bucket: aws.String(bucket),
			//ContentType: aws.String("image/jpeg"),
			Key: aws.String(filename),
		}, func(options *s3.PresignOptions) {
			options.Expires = 15 * time.Minute
		})
		if err != nil {
			return nil, err
		}
		result = append(result, object.URL)
	}

	return result, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
