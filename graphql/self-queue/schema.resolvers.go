package self_queue

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"fmt"
	"lavanilla/graphql/self-queue/model"
	"lavanilla/service"
	"lavanilla/utils"
	"path"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/samber/lo"
)

// PresignedURL is the resolver for the presignedUrl field.
func (r *queryResolver) PresignedURL(ctx context.Context, draftOrderID string, uploadToken string, qty int) ([]string, error) {
	draftOrderID, _, err := utils.ExtractIDWithDraftOrderPrefix(draftOrderID)
	if err != nil {
		return nil, err
	}

	hash := sha256.Sum256([]byte(draftOrderID))
	token := hex.EncodeToString(hash[:])

	if token != uploadToken {
		return nil, errors.New("invalid token")
	}

	var result []string
	for i := 0; i < qty; i++ {
		filename := fmt.Sprintf("%s/%d.jpeg", draftOrderID, time.Now().Unix()+1)
		object, err := r.S3PresignClient.PresignPutObject(ctx, &s3.PutObjectInput{
			Bucket:      aws.String(service.S3BucketSelfService),
			ContentType: aws.String("image/jpeg"),
			Key:         aws.String(filename),
		}, func(options *s3.PresignOptions) {
			options.Expires = 15 * time.Minute
		})
		if err != nil {
			return nil, err
		}
		result = append(result, object.URL)
	}

	return result, nil
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context, draftOrderID string, uploadToken string) ([]*model.File, error) {
	draftOrderID, _, err := utils.ExtractIDWithDraftOrderPrefix(draftOrderID)
	if err != nil {
		return nil, err
	}

	hash := sha256.Sum256([]byte(draftOrderID))
	token := hex.EncodeToString(hash[:])

	if token != uploadToken {
		return nil, errors.New("invalid token")
	}

	resp, err := r.S3Client.ListObjectsV2(ctx, &s3.ListObjectsV2Input{
		Bucket: aws.String(service.S3BucketSelfService),
		Prefix: aws.String(draftOrderID),
	})
	if err != nil {
		return nil, errors.New(fmt.Sprintf("failed to list objects: %v", err))
	}

	return lo.Map(resp.Contents, func(item types.Object, _ int) *model.File {
		return &model.File{
			Filename: path.Base(*item.Key),
			Size:     int(*item.Size),
			URL:      fmt.Sprintf("%s/%s", service.CdnSelfService, *item.Key),
		}
	}), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
