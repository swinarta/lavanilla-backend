package self_service

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.79

import (
	"context"
	"lavanilla/graphql/self-service/model"
	"lavanilla/service/custom"
	"lavanilla/service/shopify"
	"strconv"

	"github.com/samber/lo"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.OrderInput) (bool, error) {
	client := custom.NewClient()
	_, err := client.CreateDraftOrder(ctx, input)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	productConn, err := r.ShopifyClient.GetProductsSelfService(ctx)
	if err != nil {
		return nil, err
	}
	var result []*model.Product
	for _, product := range productConn.Products.Edges {
		maxPrice, err := strconv.ParseFloat(product.Node.PriceRangeV2.MaxVariantPrice.Amount, 64)
		if err != nil {
			return nil, err
		}
		minPrice, err := strconv.ParseFloat(product.Node.PriceRangeV2.MinVariantPrice.Amount, 64)
		if err != nil {
			return nil, err
		}
		result = append(result, &model.Product{
			ID:          product.Node.Id,
			Title:       product.Node.Title,
			Description: product.Node.Description,
			PriceRange: &model.PriceRange{
				MaxVariantPrice: &maxPrice,
				MinVariantPrice: &minPrice,
			},
			Images: lo.Map(product.Node.Media.Nodes, func(imageEdge shopify.GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia, _ int) string {
				return imageEdge.GetPreview().Image.Url
			}),
			// Variants: lo.Map(product.Node.Media),
		})
	}
	return result, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	productResp, err := r.ShopifyClient.GetProduct(ctx, id)
	if err != nil {
		return nil, err
	}
	return &model.Product{
		ID:          id,
		Description: productResp.Product.Description,
		Images: lo.Map(productResp.Product.Media.Nodes, func(imageEdge shopify.GetProductProductMediaMediaConnectionNodesMedia, _ int) string {
			return imageEdge.GetPreview().Image.Url
		}),
		Variants: lo.Map(productResp.Product.Variants.Nodes, func(variantEdge shopify.GetProductProductVariantsProductVariantConnectionNodesProductVariant, _ int) *model.ProductVariant {
			price, err := strconv.ParseFloat(variantEdge.Price, 64)
			if err != nil {
				price = 0
			}
			return &model.ProductVariant{
				ID:    variantEdge.Id,
				Title: variantEdge.Title,
				Sku:   variantEdge.Sku,
				Price: price,
			}
		}),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
