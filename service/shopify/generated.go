// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package shopify

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
// If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
// of another country. For example, the territories associated with Spain are represented by the country code `ES`,
// and the territories associated with the United States of America are represented by the country code `US`.
type CountryCode string

const (
	// Afghanistan.
	CountryCodeAf CountryCode = "AF"
	// Åland Islands.
	CountryCodeAx CountryCode = "AX"
	// Albania.
	CountryCodeAl CountryCode = "AL"
	// Algeria.
	CountryCodeDz CountryCode = "DZ"
	// Andorra.
	CountryCodeAd CountryCode = "AD"
	// Angola.
	CountryCodeAo CountryCode = "AO"
	// Anguilla.
	CountryCodeAi CountryCode = "AI"
	// Antigua & Barbuda.
	CountryCodeAg CountryCode = "AG"
	// Argentina.
	CountryCodeAr CountryCode = "AR"
	// Armenia.
	CountryCodeAm CountryCode = "AM"
	// Aruba.
	CountryCodeAw CountryCode = "AW"
	// Ascension Island.
	CountryCodeAc CountryCode = "AC"
	// Australia.
	CountryCodeAu CountryCode = "AU"
	// Austria.
	CountryCodeAt CountryCode = "AT"
	// Azerbaijan.
	CountryCodeAz CountryCode = "AZ"
	// Bahamas.
	CountryCodeBs CountryCode = "BS"
	// Bahrain.
	CountryCodeBh CountryCode = "BH"
	// Bangladesh.
	CountryCodeBd CountryCode = "BD"
	// Barbados.
	CountryCodeBb CountryCode = "BB"
	// Belarus.
	CountryCodeBy CountryCode = "BY"
	// Belgium.
	CountryCodeBe CountryCode = "BE"
	// Belize.
	CountryCodeBz CountryCode = "BZ"
	// Benin.
	CountryCodeBj CountryCode = "BJ"
	// Bermuda.
	CountryCodeBm CountryCode = "BM"
	// Bhutan.
	CountryCodeBt CountryCode = "BT"
	// Bolivia.
	CountryCodeBo CountryCode = "BO"
	// Bosnia & Herzegovina.
	CountryCodeBa CountryCode = "BA"
	// Botswana.
	CountryCodeBw CountryCode = "BW"
	// Bouvet Island.
	CountryCodeBv CountryCode = "BV"
	// Brazil.
	CountryCodeBr CountryCode = "BR"
	// British Indian Ocean Territory.
	CountryCodeIo CountryCode = "IO"
	// Brunei.
	CountryCodeBn CountryCode = "BN"
	// Bulgaria.
	CountryCodeBg CountryCode = "BG"
	// Burkina Faso.
	CountryCodeBf CountryCode = "BF"
	// Burundi.
	CountryCodeBi CountryCode = "BI"
	// Cambodia.
	CountryCodeKh CountryCode = "KH"
	// Canada.
	CountryCodeCa CountryCode = "CA"
	// Cape Verde.
	CountryCodeCv CountryCode = "CV"
	// Caribbean Netherlands.
	CountryCodeBq CountryCode = "BQ"
	// Cayman Islands.
	CountryCodeKy CountryCode = "KY"
	// Central African Republic.
	CountryCodeCf CountryCode = "CF"
	// Chad.
	CountryCodeTd CountryCode = "TD"
	// Chile.
	CountryCodeCl CountryCode = "CL"
	// China.
	CountryCodeCn CountryCode = "CN"
	// Christmas Island.
	CountryCodeCx CountryCode = "CX"
	// Cocos (Keeling) Islands.
	CountryCodeCc CountryCode = "CC"
	// Colombia.
	CountryCodeCo CountryCode = "CO"
	// Comoros.
	CountryCodeKm CountryCode = "KM"
	// Congo - Brazzaville.
	CountryCodeCg CountryCode = "CG"
	// Congo - Kinshasa.
	CountryCodeCd CountryCode = "CD"
	// Cook Islands.
	CountryCodeCk CountryCode = "CK"
	// Costa Rica.
	CountryCodeCr CountryCode = "CR"
	// Croatia.
	CountryCodeHr CountryCode = "HR"
	// Cuba.
	CountryCodeCu CountryCode = "CU"
	// Curaçao.
	CountryCodeCw CountryCode = "CW"
	// Cyprus.
	CountryCodeCy CountryCode = "CY"
	// Czechia.
	CountryCodeCz CountryCode = "CZ"
	// Côte d’Ivoire.
	CountryCodeCi CountryCode = "CI"
	// Denmark.
	CountryCodeDk CountryCode = "DK"
	// Djibouti.
	CountryCodeDj CountryCode = "DJ"
	// Dominica.
	CountryCodeDm CountryCode = "DM"
	// Dominican Republic.
	CountryCodeDo CountryCode = "DO"
	// Ecuador.
	CountryCodeEc CountryCode = "EC"
	// Egypt.
	CountryCodeEg CountryCode = "EG"
	// El Salvador.
	CountryCodeSv CountryCode = "SV"
	// Equatorial Guinea.
	CountryCodeGq CountryCode = "GQ"
	// Eritrea.
	CountryCodeEr CountryCode = "ER"
	// Estonia.
	CountryCodeEe CountryCode = "EE"
	// Eswatini.
	CountryCodeSz CountryCode = "SZ"
	// Ethiopia.
	CountryCodeEt CountryCode = "ET"
	// Falkland Islands.
	CountryCodeFk CountryCode = "FK"
	// Faroe Islands.
	CountryCodeFo CountryCode = "FO"
	// Fiji.
	CountryCodeFj CountryCode = "FJ"
	// Finland.
	CountryCodeFi CountryCode = "FI"
	// France.
	CountryCodeFr CountryCode = "FR"
	// French Guiana.
	CountryCodeGf CountryCode = "GF"
	// French Polynesia.
	CountryCodePf CountryCode = "PF"
	// French Southern Territories.
	CountryCodeTf CountryCode = "TF"
	// Gabon.
	CountryCodeGa CountryCode = "GA"
	// Gambia.
	CountryCodeGm CountryCode = "GM"
	// Georgia.
	CountryCodeGe CountryCode = "GE"
	// Germany.
	CountryCodeDe CountryCode = "DE"
	// Ghana.
	CountryCodeGh CountryCode = "GH"
	// Gibraltar.
	CountryCodeGi CountryCode = "GI"
	// Greece.
	CountryCodeGr CountryCode = "GR"
	// Greenland.
	CountryCodeGl CountryCode = "GL"
	// Grenada.
	CountryCodeGd CountryCode = "GD"
	// Guadeloupe.
	CountryCodeGp CountryCode = "GP"
	// Guatemala.
	CountryCodeGt CountryCode = "GT"
	// Guernsey.
	CountryCodeGg CountryCode = "GG"
	// Guinea.
	CountryCodeGn CountryCode = "GN"
	// Guinea-Bissau.
	CountryCodeGw CountryCode = "GW"
	// Guyana.
	CountryCodeGy CountryCode = "GY"
	// Haiti.
	CountryCodeHt CountryCode = "HT"
	// Heard & McDonald Islands.
	CountryCodeHm CountryCode = "HM"
	// Vatican City.
	CountryCodeVa CountryCode = "VA"
	// Honduras.
	CountryCodeHn CountryCode = "HN"
	// Hong Kong SAR.
	CountryCodeHk CountryCode = "HK"
	// Hungary.
	CountryCodeHu CountryCode = "HU"
	// Iceland.
	CountryCodeIs CountryCode = "IS"
	// India.
	CountryCodeIn CountryCode = "IN"
	// Indonesia.
	CountryCodeId CountryCode = "ID"
	// Iran.
	CountryCodeIr CountryCode = "IR"
	// Iraq.
	CountryCodeIq CountryCode = "IQ"
	// Ireland.
	CountryCodeIe CountryCode = "IE"
	// Isle of Man.
	CountryCodeIm CountryCode = "IM"
	// Israel.
	CountryCodeIl CountryCode = "IL"
	// Italy.
	CountryCodeIt CountryCode = "IT"
	// Jamaica.
	CountryCodeJm CountryCode = "JM"
	// Japan.
	CountryCodeJp CountryCode = "JP"
	// Jersey.
	CountryCodeJe CountryCode = "JE"
	// Jordan.
	CountryCodeJo CountryCode = "JO"
	// Kazakhstan.
	CountryCodeKz CountryCode = "KZ"
	// Kenya.
	CountryCodeKe CountryCode = "KE"
	// Kiribati.
	CountryCodeKi CountryCode = "KI"
	// North Korea.
	CountryCodeKp CountryCode = "KP"
	// Kosovo.
	CountryCodeXk CountryCode = "XK"
	// Kuwait.
	CountryCodeKw CountryCode = "KW"
	// Kyrgyzstan.
	CountryCodeKg CountryCode = "KG"
	// Laos.
	CountryCodeLa CountryCode = "LA"
	// Latvia.
	CountryCodeLv CountryCode = "LV"
	// Lebanon.
	CountryCodeLb CountryCode = "LB"
	// Lesotho.
	CountryCodeLs CountryCode = "LS"
	// Liberia.
	CountryCodeLr CountryCode = "LR"
	// Libya.
	CountryCodeLy CountryCode = "LY"
	// Liechtenstein.
	CountryCodeLi CountryCode = "LI"
	// Lithuania.
	CountryCodeLt CountryCode = "LT"
	// Luxembourg.
	CountryCodeLu CountryCode = "LU"
	// Macao SAR.
	CountryCodeMo CountryCode = "MO"
	// Madagascar.
	CountryCodeMg CountryCode = "MG"
	// Malawi.
	CountryCodeMw CountryCode = "MW"
	// Malaysia.
	CountryCodeMy CountryCode = "MY"
	// Maldives.
	CountryCodeMv CountryCode = "MV"
	// Mali.
	CountryCodeMl CountryCode = "ML"
	// Malta.
	CountryCodeMt CountryCode = "MT"
	// Martinique.
	CountryCodeMq CountryCode = "MQ"
	// Mauritania.
	CountryCodeMr CountryCode = "MR"
	// Mauritius.
	CountryCodeMu CountryCode = "MU"
	// Mayotte.
	CountryCodeYt CountryCode = "YT"
	// Mexico.
	CountryCodeMx CountryCode = "MX"
	// Moldova.
	CountryCodeMd CountryCode = "MD"
	// Monaco.
	CountryCodeMc CountryCode = "MC"
	// Mongolia.
	CountryCodeMn CountryCode = "MN"
	// Montenegro.
	CountryCodeMe CountryCode = "ME"
	// Montserrat.
	CountryCodeMs CountryCode = "MS"
	// Morocco.
	CountryCodeMa CountryCode = "MA"
	// Mozambique.
	CountryCodeMz CountryCode = "MZ"
	// Myanmar (Burma).
	CountryCodeMm CountryCode = "MM"
	// Namibia.
	CountryCodeNa CountryCode = "NA"
	// Nauru.
	CountryCodeNr CountryCode = "NR"
	// Nepal.
	CountryCodeNp CountryCode = "NP"
	// Netherlands.
	CountryCodeNl CountryCode = "NL"
	// Netherlands Antilles.
	CountryCodeAn CountryCode = "AN"
	// New Caledonia.
	CountryCodeNc CountryCode = "NC"
	// New Zealand.
	CountryCodeNz CountryCode = "NZ"
	// Nicaragua.
	CountryCodeNi CountryCode = "NI"
	// Niger.
	CountryCodeNe CountryCode = "NE"
	// Nigeria.
	CountryCodeNg CountryCode = "NG"
	// Niue.
	CountryCodeNu CountryCode = "NU"
	// Norfolk Island.
	CountryCodeNf CountryCode = "NF"
	// North Macedonia.
	CountryCodeMk CountryCode = "MK"
	// Norway.
	CountryCodeNo CountryCode = "NO"
	// Oman.
	CountryCodeOm CountryCode = "OM"
	// Pakistan.
	CountryCodePk CountryCode = "PK"
	// Palestinian Territories.
	CountryCodePs CountryCode = "PS"
	// Panama.
	CountryCodePa CountryCode = "PA"
	// Papua New Guinea.
	CountryCodePg CountryCode = "PG"
	// Paraguay.
	CountryCodePy CountryCode = "PY"
	// Peru.
	CountryCodePe CountryCode = "PE"
	// Philippines.
	CountryCodePh CountryCode = "PH"
	// Pitcairn Islands.
	CountryCodePn CountryCode = "PN"
	// Poland.
	CountryCodePl CountryCode = "PL"
	// Portugal.
	CountryCodePt CountryCode = "PT"
	// Qatar.
	CountryCodeQa CountryCode = "QA"
	// Cameroon.
	CountryCodeCm CountryCode = "CM"
	// Réunion.
	CountryCodeRe CountryCode = "RE"
	// Romania.
	CountryCodeRo CountryCode = "RO"
	// Russia.
	CountryCodeRu CountryCode = "RU"
	// Rwanda.
	CountryCodeRw CountryCode = "RW"
	// St. Barthélemy.
	CountryCodeBl CountryCode = "BL"
	// St. Helena.
	CountryCodeSh CountryCode = "SH"
	// St. Kitts & Nevis.
	CountryCodeKn CountryCode = "KN"
	// St. Lucia.
	CountryCodeLc CountryCode = "LC"
	// St. Martin.
	CountryCodeMf CountryCode = "MF"
	// St. Pierre & Miquelon.
	CountryCodePm CountryCode = "PM"
	// Samoa.
	CountryCodeWs CountryCode = "WS"
	// San Marino.
	CountryCodeSm CountryCode = "SM"
	// São Tomé & Príncipe.
	CountryCodeSt CountryCode = "ST"
	// Saudi Arabia.
	CountryCodeSa CountryCode = "SA"
	// Senegal.
	CountryCodeSn CountryCode = "SN"
	// Serbia.
	CountryCodeRs CountryCode = "RS"
	// Seychelles.
	CountryCodeSc CountryCode = "SC"
	// Sierra Leone.
	CountryCodeSl CountryCode = "SL"
	// Singapore.
	CountryCodeSg CountryCode = "SG"
	// Sint Maarten.
	CountryCodeSx CountryCode = "SX"
	// Slovakia.
	CountryCodeSk CountryCode = "SK"
	// Slovenia.
	CountryCodeSi CountryCode = "SI"
	// Solomon Islands.
	CountryCodeSb CountryCode = "SB"
	// Somalia.
	CountryCodeSo CountryCode = "SO"
	// South Africa.
	CountryCodeZa CountryCode = "ZA"
	// South Georgia & South Sandwich Islands.
	CountryCodeGs CountryCode = "GS"
	// South Korea.
	CountryCodeKr CountryCode = "KR"
	// South Sudan.
	CountryCodeSs CountryCode = "SS"
	// Spain.
	CountryCodeEs CountryCode = "ES"
	// Sri Lanka.
	CountryCodeLk CountryCode = "LK"
	// St. Vincent & Grenadines.
	CountryCodeVc CountryCode = "VC"
	// Sudan.
	CountryCodeSd CountryCode = "SD"
	// Suriname.
	CountryCodeSr CountryCode = "SR"
	// Svalbard & Jan Mayen.
	CountryCodeSj CountryCode = "SJ"
	// Sweden.
	CountryCodeSe CountryCode = "SE"
	// Switzerland.
	CountryCodeCh CountryCode = "CH"
	// Syria.
	CountryCodeSy CountryCode = "SY"
	// Taiwan.
	CountryCodeTw CountryCode = "TW"
	// Tajikistan.
	CountryCodeTj CountryCode = "TJ"
	// Tanzania.
	CountryCodeTz CountryCode = "TZ"
	// Thailand.
	CountryCodeTh CountryCode = "TH"
	// Timor-Leste.
	CountryCodeTl CountryCode = "TL"
	// Togo.
	CountryCodeTg CountryCode = "TG"
	// Tokelau.
	CountryCodeTk CountryCode = "TK"
	// Tonga.
	CountryCodeTo CountryCode = "TO"
	// Trinidad & Tobago.
	CountryCodeTt CountryCode = "TT"
	// Tristan da Cunha.
	CountryCodeTa CountryCode = "TA"
	// Tunisia.
	CountryCodeTn CountryCode = "TN"
	// Türkiye.
	CountryCodeTr CountryCode = "TR"
	// Turkmenistan.
	CountryCodeTm CountryCode = "TM"
	// Turks & Caicos Islands.
	CountryCodeTc CountryCode = "TC"
	// Tuvalu.
	CountryCodeTv CountryCode = "TV"
	// Uganda.
	CountryCodeUg CountryCode = "UG"
	// Ukraine.
	CountryCodeUa CountryCode = "UA"
	// United Arab Emirates.
	CountryCodeAe CountryCode = "AE"
	// United Kingdom.
	CountryCodeGb CountryCode = "GB"
	// United States.
	CountryCodeUs CountryCode = "US"
	// U.S. Outlying Islands.
	CountryCodeUm CountryCode = "UM"
	// Uruguay.
	CountryCodeUy CountryCode = "UY"
	// Uzbekistan.
	CountryCodeUz CountryCode = "UZ"
	// Vanuatu.
	CountryCodeVu CountryCode = "VU"
	// Venezuela.
	CountryCodeVe CountryCode = "VE"
	// Vietnam.
	CountryCodeVn CountryCode = "VN"
	// British Virgin Islands.
	CountryCodeVg CountryCode = "VG"
	// Wallis & Futuna.
	CountryCodeWf CountryCode = "WF"
	// Western Sahara.
	CountryCodeEh CountryCode = "EH"
	// Yemen.
	CountryCodeYe CountryCode = "YE"
	// Zambia.
	CountryCodeZm CountryCode = "ZM"
	// Zimbabwe.
	CountryCodeZw CountryCode = "ZW"
	// Unknown Region.
	CountryCodeZz CountryCode = "ZZ"
)

var AllCountryCode = []CountryCode{
	CountryCodeAf,
	CountryCodeAx,
	CountryCodeAl,
	CountryCodeDz,
	CountryCodeAd,
	CountryCodeAo,
	CountryCodeAi,
	CountryCodeAg,
	CountryCodeAr,
	CountryCodeAm,
	CountryCodeAw,
	CountryCodeAc,
	CountryCodeAu,
	CountryCodeAt,
	CountryCodeAz,
	CountryCodeBs,
	CountryCodeBh,
	CountryCodeBd,
	CountryCodeBb,
	CountryCodeBy,
	CountryCodeBe,
	CountryCodeBz,
	CountryCodeBj,
	CountryCodeBm,
	CountryCodeBt,
	CountryCodeBo,
	CountryCodeBa,
	CountryCodeBw,
	CountryCodeBv,
	CountryCodeBr,
	CountryCodeIo,
	CountryCodeBn,
	CountryCodeBg,
	CountryCodeBf,
	CountryCodeBi,
	CountryCodeKh,
	CountryCodeCa,
	CountryCodeCv,
	CountryCodeBq,
	CountryCodeKy,
	CountryCodeCf,
	CountryCodeTd,
	CountryCodeCl,
	CountryCodeCn,
	CountryCodeCx,
	CountryCodeCc,
	CountryCodeCo,
	CountryCodeKm,
	CountryCodeCg,
	CountryCodeCd,
	CountryCodeCk,
	CountryCodeCr,
	CountryCodeHr,
	CountryCodeCu,
	CountryCodeCw,
	CountryCodeCy,
	CountryCodeCz,
	CountryCodeCi,
	CountryCodeDk,
	CountryCodeDj,
	CountryCodeDm,
	CountryCodeDo,
	CountryCodeEc,
	CountryCodeEg,
	CountryCodeSv,
	CountryCodeGq,
	CountryCodeEr,
	CountryCodeEe,
	CountryCodeSz,
	CountryCodeEt,
	CountryCodeFk,
	CountryCodeFo,
	CountryCodeFj,
	CountryCodeFi,
	CountryCodeFr,
	CountryCodeGf,
	CountryCodePf,
	CountryCodeTf,
	CountryCodeGa,
	CountryCodeGm,
	CountryCodeGe,
	CountryCodeDe,
	CountryCodeGh,
	CountryCodeGi,
	CountryCodeGr,
	CountryCodeGl,
	CountryCodeGd,
	CountryCodeGp,
	CountryCodeGt,
	CountryCodeGg,
	CountryCodeGn,
	CountryCodeGw,
	CountryCodeGy,
	CountryCodeHt,
	CountryCodeHm,
	CountryCodeVa,
	CountryCodeHn,
	CountryCodeHk,
	CountryCodeHu,
	CountryCodeIs,
	CountryCodeIn,
	CountryCodeId,
	CountryCodeIr,
	CountryCodeIq,
	CountryCodeIe,
	CountryCodeIm,
	CountryCodeIl,
	CountryCodeIt,
	CountryCodeJm,
	CountryCodeJp,
	CountryCodeJe,
	CountryCodeJo,
	CountryCodeKz,
	CountryCodeKe,
	CountryCodeKi,
	CountryCodeKp,
	CountryCodeXk,
	CountryCodeKw,
	CountryCodeKg,
	CountryCodeLa,
	CountryCodeLv,
	CountryCodeLb,
	CountryCodeLs,
	CountryCodeLr,
	CountryCodeLy,
	CountryCodeLi,
	CountryCodeLt,
	CountryCodeLu,
	CountryCodeMo,
	CountryCodeMg,
	CountryCodeMw,
	CountryCodeMy,
	CountryCodeMv,
	CountryCodeMl,
	CountryCodeMt,
	CountryCodeMq,
	CountryCodeMr,
	CountryCodeMu,
	CountryCodeYt,
	CountryCodeMx,
	CountryCodeMd,
	CountryCodeMc,
	CountryCodeMn,
	CountryCodeMe,
	CountryCodeMs,
	CountryCodeMa,
	CountryCodeMz,
	CountryCodeMm,
	CountryCodeNa,
	CountryCodeNr,
	CountryCodeNp,
	CountryCodeNl,
	CountryCodeAn,
	CountryCodeNc,
	CountryCodeNz,
	CountryCodeNi,
	CountryCodeNe,
	CountryCodeNg,
	CountryCodeNu,
	CountryCodeNf,
	CountryCodeMk,
	CountryCodeNo,
	CountryCodeOm,
	CountryCodePk,
	CountryCodePs,
	CountryCodePa,
	CountryCodePg,
	CountryCodePy,
	CountryCodePe,
	CountryCodePh,
	CountryCodePn,
	CountryCodePl,
	CountryCodePt,
	CountryCodeQa,
	CountryCodeCm,
	CountryCodeRe,
	CountryCodeRo,
	CountryCodeRu,
	CountryCodeRw,
	CountryCodeBl,
	CountryCodeSh,
	CountryCodeKn,
	CountryCodeLc,
	CountryCodeMf,
	CountryCodePm,
	CountryCodeWs,
	CountryCodeSm,
	CountryCodeSt,
	CountryCodeSa,
	CountryCodeSn,
	CountryCodeRs,
	CountryCodeSc,
	CountryCodeSl,
	CountryCodeSg,
	CountryCodeSx,
	CountryCodeSk,
	CountryCodeSi,
	CountryCodeSb,
	CountryCodeSo,
	CountryCodeZa,
	CountryCodeGs,
	CountryCodeKr,
	CountryCodeSs,
	CountryCodeEs,
	CountryCodeLk,
	CountryCodeVc,
	CountryCodeSd,
	CountryCodeSr,
	CountryCodeSj,
	CountryCodeSe,
	CountryCodeCh,
	CountryCodeSy,
	CountryCodeTw,
	CountryCodeTj,
	CountryCodeTz,
	CountryCodeTh,
	CountryCodeTl,
	CountryCodeTg,
	CountryCodeTk,
	CountryCodeTo,
	CountryCodeTt,
	CountryCodeTa,
	CountryCodeTn,
	CountryCodeTr,
	CountryCodeTm,
	CountryCodeTc,
	CountryCodeTv,
	CountryCodeUg,
	CountryCodeUa,
	CountryCodeAe,
	CountryCodeGb,
	CountryCodeUs,
	CountryCodeUm,
	CountryCodeUy,
	CountryCodeUz,
	CountryCodeVu,
	CountryCodeVe,
	CountryCodeVn,
	CountryCodeVg,
	CountryCodeWf,
	CountryCodeEh,
	CountryCodeYe,
	CountryCodeZm,
	CountryCodeZw,
	CountryCodeZz,
}

// CreateCustomerCustomerCreateCustomerCreatePayload includes the requested fields of the GraphQL type CustomerCreatePayload.
// The GraphQL type's documentation follows.
//
// Return type for `customerCreate` mutation.
type CreateCustomerCustomerCreateCustomerCreatePayload struct {
	// The created customer.
	Customer CreateCustomerCustomerCreateCustomerCreatePayloadCustomer `json:"customer"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []CreateCustomerCustomerCreateCustomerCreatePayloadUserErrorsUserError `json:"userErrors"`
}

// GetCustomer returns CreateCustomerCustomerCreateCustomerCreatePayload.Customer, and is useful for accessing the field via an interface.
func (v *CreateCustomerCustomerCreateCustomerCreatePayload) GetCustomer() CreateCustomerCustomerCreateCustomerCreatePayloadCustomer {
	return v.Customer
}

// GetUserErrors returns CreateCustomerCustomerCreateCustomerCreatePayload.UserErrors, and is useful for accessing the field via an interface.
func (v *CreateCustomerCustomerCreateCustomerCreatePayload) GetUserErrors() []CreateCustomerCustomerCreateCustomerCreatePayloadUserErrorsUserError {
	return v.UserErrors
}

// CreateCustomerCustomerCreateCustomerCreatePayloadCustomer includes the requested fields of the GraphQL type Customer.
// The GraphQL type's documentation follows.
//
// Represents information about a customer of the shop, such as the customer's contact details, their order
// history, and whether they've agreed to receive marketing material by email.
//
// **Caution:** Only use this data if it's required for your app's functionality.
// Shopify will restrict [access to
// scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
// legitimate use for the associated data.
type CreateCustomerCustomerCreateCustomerCreatePayloadCustomer struct {
	// A globally-unique ID.
	Id string `json:"id"`
}

// GetId returns CreateCustomerCustomerCreateCustomerCreatePayloadCustomer.Id, and is useful for accessing the field via an interface.
func (v *CreateCustomerCustomerCreateCustomerCreatePayloadCustomer) GetId() string { return v.Id }

// CreateCustomerCustomerCreateCustomerCreatePayloadUserErrorsUserError includes the requested fields of the GraphQL type UserError.
// The GraphQL type's documentation follows.
//
// Represents an error in the input of a mutation.
type CreateCustomerCustomerCreateCustomerCreatePayloadUserErrorsUserError struct {
	// The path to the input field that caused the error.
	Field []string `json:"field"`
	// The error message.
	Message string `json:"message"`
}

// GetField returns CreateCustomerCustomerCreateCustomerCreatePayloadUserErrorsUserError.Field, and is useful for accessing the field via an interface.
func (v *CreateCustomerCustomerCreateCustomerCreatePayloadUserErrorsUserError) GetField() []string {
	return v.Field
}

// GetMessage returns CreateCustomerCustomerCreateCustomerCreatePayloadUserErrorsUserError.Message, and is useful for accessing the field via an interface.
func (v *CreateCustomerCustomerCreateCustomerCreatePayloadUserErrorsUserError) GetMessage() string {
	return v.Message
}

// CreateCustomerResponse is returned by CreateCustomer on success.
type CreateCustomerResponse struct {
	// Create a new customer. As of API version 2022-10, apps using protected
	// customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
	CustomerCreate CreateCustomerCustomerCreateCustomerCreatePayload `json:"customerCreate"`
}

// GetCustomerCreate returns CreateCustomerResponse.CustomerCreate, and is useful for accessing the field via an interface.
func (v *CreateCustomerResponse) GetCustomerCreate() CreateCustomerCustomerCreateCustomerCreatePayload {
	return v.CustomerCreate
}

// The currency codes that represent the world currencies throughout the Admin API. Currency codes include
// [standard ISO 4217 codes](https://en.wikipedia.org/wiki/ISO_4217), legacy codes, non-standard codes,
// digital currency codes.
type CurrencyCode string

const (
	// United States Dollars (USD).
	CurrencyCodeUsd CurrencyCode = "USD"
	// Euro (EUR).
	CurrencyCodeEur CurrencyCode = "EUR"
	// United Kingdom Pounds (GBP).
	CurrencyCodeGbp CurrencyCode = "GBP"
	// Canadian Dollars (CAD).
	CurrencyCodeCad CurrencyCode = "CAD"
	// Afghan Afghani (AFN).
	CurrencyCodeAfn CurrencyCode = "AFN"
	// Albanian Lek (ALL).
	CurrencyCodeAll CurrencyCode = "ALL"
	// Algerian Dinar (DZD).
	CurrencyCodeDzd CurrencyCode = "DZD"
	// Angolan Kwanza (AOA).
	CurrencyCodeAoa CurrencyCode = "AOA"
	// Argentine Pesos (ARS).
	CurrencyCodeArs CurrencyCode = "ARS"
	// Armenian Dram (AMD).
	CurrencyCodeAmd CurrencyCode = "AMD"
	// Aruban Florin (AWG).
	CurrencyCodeAwg CurrencyCode = "AWG"
	// Australian Dollars (AUD).
	CurrencyCodeAud CurrencyCode = "AUD"
	// Barbadian Dollar (BBD).
	CurrencyCodeBbd CurrencyCode = "BBD"
	// Azerbaijani Manat (AZN).
	CurrencyCodeAzn CurrencyCode = "AZN"
	// Bangladesh Taka (BDT).
	CurrencyCodeBdt CurrencyCode = "BDT"
	// Bahamian Dollar (BSD).
	CurrencyCodeBsd CurrencyCode = "BSD"
	// Bahraini Dinar (BHD).
	CurrencyCodeBhd CurrencyCode = "BHD"
	// Burundian Franc (BIF).
	CurrencyCodeBif CurrencyCode = "BIF"
	// Belarusian Ruble (BYN).
	CurrencyCodeByn CurrencyCode = "BYN"
	// Belize Dollar (BZD).
	CurrencyCodeBzd CurrencyCode = "BZD"
	// Bermudian Dollar (BMD).
	CurrencyCodeBmd CurrencyCode = "BMD"
	// Bhutanese Ngultrum (BTN).
	CurrencyCodeBtn CurrencyCode = "BTN"
	// Bosnia and Herzegovina Convertible Mark (BAM).
	CurrencyCodeBam CurrencyCode = "BAM"
	// Brazilian Real (BRL).
	CurrencyCodeBrl CurrencyCode = "BRL"
	// Bolivian Boliviano (BOB).
	CurrencyCodeBob CurrencyCode = "BOB"
	// Botswana Pula (BWP).
	CurrencyCodeBwp CurrencyCode = "BWP"
	// Brunei Dollar (BND).
	CurrencyCodeBnd CurrencyCode = "BND"
	// Bulgarian Lev (BGN).
	CurrencyCodeBgn CurrencyCode = "BGN"
	// Burmese Kyat (MMK).
	CurrencyCodeMmk CurrencyCode = "MMK"
	// Cambodian Riel.
	CurrencyCodeKhr CurrencyCode = "KHR"
	// Cape Verdean escudo (CVE).
	CurrencyCodeCve CurrencyCode = "CVE"
	// Cayman Dollars (KYD).
	CurrencyCodeKyd CurrencyCode = "KYD"
	// Central African CFA Franc (XAF).
	CurrencyCodeXaf CurrencyCode = "XAF"
	// Chilean Peso (CLP).
	CurrencyCodeClp CurrencyCode = "CLP"
	// Chinese Yuan Renminbi (CNY).
	CurrencyCodeCny CurrencyCode = "CNY"
	// Colombian Peso (COP).
	CurrencyCodeCop CurrencyCode = "COP"
	// Comorian Franc (KMF).
	CurrencyCodeKmf CurrencyCode = "KMF"
	// Congolese franc (CDF).
	CurrencyCodeCdf CurrencyCode = "CDF"
	// Costa Rican Colones (CRC).
	CurrencyCodeCrc CurrencyCode = "CRC"
	// Croatian Kuna (HRK).
	CurrencyCodeHrk CurrencyCode = "HRK"
	// Czech Koruny (CZK).
	CurrencyCodeCzk CurrencyCode = "CZK"
	// Danish Kroner (DKK).
	CurrencyCodeDkk CurrencyCode = "DKK"
	// Djiboutian Franc (DJF).
	CurrencyCodeDjf CurrencyCode = "DJF"
	// Dominican Peso (DOP).
	CurrencyCodeDop CurrencyCode = "DOP"
	// East Caribbean Dollar (XCD).
	CurrencyCodeXcd CurrencyCode = "XCD"
	// Egyptian Pound (EGP).
	CurrencyCodeEgp CurrencyCode = "EGP"
	// Eritrean Nakfa (ERN).
	CurrencyCodeErn CurrencyCode = "ERN"
	// Ethiopian Birr (ETB).
	CurrencyCodeEtb CurrencyCode = "ETB"
	// Falkland Islands Pounds (FKP).
	CurrencyCodeFkp CurrencyCode = "FKP"
	// CFP Franc (XPF).
	CurrencyCodeXpf CurrencyCode = "XPF"
	// Fijian Dollars (FJD).
	CurrencyCodeFjd CurrencyCode = "FJD"
	// Gibraltar Pounds (GIP).
	CurrencyCodeGip CurrencyCode = "GIP"
	// Gambian Dalasi (GMD).
	CurrencyCodeGmd CurrencyCode = "GMD"
	// Ghanaian Cedi (GHS).
	CurrencyCodeGhs CurrencyCode = "GHS"
	// Guatemalan Quetzal (GTQ).
	CurrencyCodeGtq CurrencyCode = "GTQ"
	// Guyanese Dollar (GYD).
	CurrencyCodeGyd CurrencyCode = "GYD"
	// Georgian Lari (GEL).
	CurrencyCodeGel CurrencyCode = "GEL"
	// Guinean Franc (GNF).
	CurrencyCodeGnf CurrencyCode = "GNF"
	// Haitian Gourde (HTG).
	CurrencyCodeHtg CurrencyCode = "HTG"
	// Honduran Lempira (HNL).
	CurrencyCodeHnl CurrencyCode = "HNL"
	// Hong Kong Dollars (HKD).
	CurrencyCodeHkd CurrencyCode = "HKD"
	// Hungarian Forint (HUF).
	CurrencyCodeHuf CurrencyCode = "HUF"
	// Icelandic Kronur (ISK).
	CurrencyCodeIsk CurrencyCode = "ISK"
	// Indian Rupees (INR).
	CurrencyCodeInr CurrencyCode = "INR"
	// Indonesian Rupiah (IDR).
	CurrencyCodeIdr CurrencyCode = "IDR"
	// Israeli New Shekel (NIS).
	CurrencyCodeIls CurrencyCode = "ILS"
	// Iranian Rial (IRR).
	CurrencyCodeIrr CurrencyCode = "IRR"
	// Iraqi Dinar (IQD).
	CurrencyCodeIqd CurrencyCode = "IQD"
	// Jamaican Dollars (JMD).
	CurrencyCodeJmd CurrencyCode = "JMD"
	// Japanese Yen (JPY).
	CurrencyCodeJpy CurrencyCode = "JPY"
	// Jersey Pound.
	CurrencyCodeJep CurrencyCode = "JEP"
	// Jordanian Dinar (JOD).
	CurrencyCodeJod CurrencyCode = "JOD"
	// Kazakhstani Tenge (KZT).
	CurrencyCodeKzt CurrencyCode = "KZT"
	// Kenyan Shilling (KES).
	CurrencyCodeKes CurrencyCode = "KES"
	// Kiribati Dollar (KID).
	CurrencyCodeKid CurrencyCode = "KID"
	// Kuwaiti Dinar (KWD).
	CurrencyCodeKwd CurrencyCode = "KWD"
	// Kyrgyzstani Som (KGS).
	CurrencyCodeKgs CurrencyCode = "KGS"
	// Laotian Kip (LAK).
	CurrencyCodeLak CurrencyCode = "LAK"
	// Latvian Lati (LVL).
	CurrencyCodeLvl CurrencyCode = "LVL"
	// Lebanese Pounds (LBP).
	CurrencyCodeLbp CurrencyCode = "LBP"
	// Lesotho Loti (LSL).
	CurrencyCodeLsl CurrencyCode = "LSL"
	// Liberian Dollar (LRD).
	CurrencyCodeLrd CurrencyCode = "LRD"
	// Libyan Dinar (LYD).
	CurrencyCodeLyd CurrencyCode = "LYD"
	// Lithuanian Litai (LTL).
	CurrencyCodeLtl CurrencyCode = "LTL"
	// Malagasy Ariary (MGA).
	CurrencyCodeMga CurrencyCode = "MGA"
	// Macedonia Denar (MKD).
	CurrencyCodeMkd CurrencyCode = "MKD"
	// Macanese Pataca (MOP).
	CurrencyCodeMop CurrencyCode = "MOP"
	// Malawian Kwacha (MWK).
	CurrencyCodeMwk CurrencyCode = "MWK"
	// Maldivian Rufiyaa (MVR).
	CurrencyCodeMvr CurrencyCode = "MVR"
	// Mauritanian Ouguiya (MRU).
	CurrencyCodeMru CurrencyCode = "MRU"
	// Mexican Pesos (MXN).
	CurrencyCodeMxn CurrencyCode = "MXN"
	// Malaysian Ringgits (MYR).
	CurrencyCodeMyr CurrencyCode = "MYR"
	// Mauritian Rupee (MUR).
	CurrencyCodeMur CurrencyCode = "MUR"
	// Moldovan Leu (MDL).
	CurrencyCodeMdl CurrencyCode = "MDL"
	// Moroccan Dirham.
	CurrencyCodeMad CurrencyCode = "MAD"
	// Mongolian Tugrik.
	CurrencyCodeMnt CurrencyCode = "MNT"
	// Mozambican Metical.
	CurrencyCodeMzn CurrencyCode = "MZN"
	// Namibian Dollar.
	CurrencyCodeNad CurrencyCode = "NAD"
	// Nepalese Rupee (NPR).
	CurrencyCodeNpr CurrencyCode = "NPR"
	// Netherlands Antillean Guilder.
	CurrencyCodeAng CurrencyCode = "ANG"
	// New Zealand Dollars (NZD).
	CurrencyCodeNzd CurrencyCode = "NZD"
	// Nicaraguan Córdoba (NIO).
	CurrencyCodeNio CurrencyCode = "NIO"
	// Nigerian Naira (NGN).
	CurrencyCodeNgn CurrencyCode = "NGN"
	// Norwegian Kroner (NOK).
	CurrencyCodeNok CurrencyCode = "NOK"
	// Omani Rial (OMR).
	CurrencyCodeOmr CurrencyCode = "OMR"
	// Panamian Balboa (PAB).
	CurrencyCodePab CurrencyCode = "PAB"
	// Pakistani Rupee (PKR).
	CurrencyCodePkr CurrencyCode = "PKR"
	// Papua New Guinean Kina (PGK).
	CurrencyCodePgk CurrencyCode = "PGK"
	// Paraguayan Guarani (PYG).
	CurrencyCodePyg CurrencyCode = "PYG"
	// Peruvian Nuevo Sol (PEN).
	CurrencyCodePen CurrencyCode = "PEN"
	// Philippine Peso (PHP).
	CurrencyCodePhp CurrencyCode = "PHP"
	// Polish Zlotych (PLN).
	CurrencyCodePln CurrencyCode = "PLN"
	// Qatari Rial (QAR).
	CurrencyCodeQar CurrencyCode = "QAR"
	// Romanian Lei (RON).
	CurrencyCodeRon CurrencyCode = "RON"
	// Russian Rubles (RUB).
	CurrencyCodeRub CurrencyCode = "RUB"
	// Rwandan Franc (RWF).
	CurrencyCodeRwf CurrencyCode = "RWF"
	// Samoan Tala (WST).
	CurrencyCodeWst CurrencyCode = "WST"
	// Saint Helena Pounds (SHP).
	CurrencyCodeShp CurrencyCode = "SHP"
	// Saudi Riyal (SAR).
	CurrencyCodeSar CurrencyCode = "SAR"
	// Serbian dinar (RSD).
	CurrencyCodeRsd CurrencyCode = "RSD"
	// Seychellois Rupee (SCR).
	CurrencyCodeScr CurrencyCode = "SCR"
	// Sierra Leonean Leone (SLL).
	CurrencyCodeSll CurrencyCode = "SLL"
	// Singapore Dollars (SGD).
	CurrencyCodeSgd CurrencyCode = "SGD"
	// Sudanese Pound (SDG).
	CurrencyCodeSdg CurrencyCode = "SDG"
	// Somali Shilling (SOS).
	CurrencyCodeSos CurrencyCode = "SOS"
	// Syrian Pound (SYP).
	CurrencyCodeSyp CurrencyCode = "SYP"
	// South African Rand (ZAR).
	CurrencyCodeZar CurrencyCode = "ZAR"
	// South Korean Won (KRW).
	CurrencyCodeKrw CurrencyCode = "KRW"
	// South Sudanese Pound (SSP).
	CurrencyCodeSsp CurrencyCode = "SSP"
	// Solomon Islands Dollar (SBD).
	CurrencyCodeSbd CurrencyCode = "SBD"
	// Sri Lankan Rupees (LKR).
	CurrencyCodeLkr CurrencyCode = "LKR"
	// Surinamese Dollar (SRD).
	CurrencyCodeSrd CurrencyCode = "SRD"
	// Swazi Lilangeni (SZL).
	CurrencyCodeSzl CurrencyCode = "SZL"
	// Swedish Kronor (SEK).
	CurrencyCodeSek CurrencyCode = "SEK"
	// Swiss Francs (CHF).
	CurrencyCodeChf CurrencyCode = "CHF"
	// Taiwan Dollars (TWD).
	CurrencyCodeTwd CurrencyCode = "TWD"
	// Thai baht (THB).
	CurrencyCodeThb CurrencyCode = "THB"
	// Tajikistani Somoni (TJS).
	CurrencyCodeTjs CurrencyCode = "TJS"
	// Tanzanian Shilling (TZS).
	CurrencyCodeTzs CurrencyCode = "TZS"
	// Tongan Pa'anga (TOP).
	CurrencyCodeTop CurrencyCode = "TOP"
	// Trinidad and Tobago Dollars (TTD).
	CurrencyCodeTtd CurrencyCode = "TTD"
	// Tunisian Dinar (TND).
	CurrencyCodeTnd CurrencyCode = "TND"
	// Turkish Lira (TRY).
	CurrencyCodeTry CurrencyCode = "TRY"
	// Turkmenistani Manat (TMT).
	CurrencyCodeTmt CurrencyCode = "TMT"
	// Ugandan Shilling (UGX).
	CurrencyCodeUgx CurrencyCode = "UGX"
	// Ukrainian Hryvnia (UAH).
	CurrencyCodeUah CurrencyCode = "UAH"
	// United Arab Emirates Dirham (AED).
	CurrencyCodeAed CurrencyCode = "AED"
	// Uruguayan Pesos (UYU).
	CurrencyCodeUyu CurrencyCode = "UYU"
	// Uzbekistan som (UZS).
	CurrencyCodeUzs CurrencyCode = "UZS"
	// Vanuatu Vatu (VUV).
	CurrencyCodeVuv CurrencyCode = "VUV"
	// Venezuelan Bolivares Soberanos (VES).
	CurrencyCodeVes CurrencyCode = "VES"
	// Vietnamese đồng (VND).
	CurrencyCodeVnd CurrencyCode = "VND"
	// West African CFA franc (XOF).
	CurrencyCodeXof CurrencyCode = "XOF"
	// Yemeni Rial (YER).
	CurrencyCodeYer CurrencyCode = "YER"
	// Zambian Kwacha (ZMW).
	CurrencyCodeZmw CurrencyCode = "ZMW"
	// United States Dollars Coin (USDC).
	CurrencyCodeUsdc CurrencyCode = "USDC"
	// Belarusian Ruble (BYR).
	CurrencyCodeByr CurrencyCode = "BYR"
	// Sao Tome And Principe Dobra (STD).
	CurrencyCodeStd CurrencyCode = "STD"
	// Sao Tome And Principe Dobra (STN).
	CurrencyCodeStn CurrencyCode = "STN"
	// Venezuelan Bolivares (VED).
	CurrencyCodeVed CurrencyCode = "VED"
	// Venezuelan Bolivares (VEF).
	CurrencyCodeVef CurrencyCode = "VEF"
	// Unrecognized currency.
	CurrencyCodeXxx CurrencyCode = "XXX"
)

var AllCurrencyCode = []CurrencyCode{
	CurrencyCodeUsd,
	CurrencyCodeEur,
	CurrencyCodeGbp,
	CurrencyCodeCad,
	CurrencyCodeAfn,
	CurrencyCodeAll,
	CurrencyCodeDzd,
	CurrencyCodeAoa,
	CurrencyCodeArs,
	CurrencyCodeAmd,
	CurrencyCodeAwg,
	CurrencyCodeAud,
	CurrencyCodeBbd,
	CurrencyCodeAzn,
	CurrencyCodeBdt,
	CurrencyCodeBsd,
	CurrencyCodeBhd,
	CurrencyCodeBif,
	CurrencyCodeByn,
	CurrencyCodeBzd,
	CurrencyCodeBmd,
	CurrencyCodeBtn,
	CurrencyCodeBam,
	CurrencyCodeBrl,
	CurrencyCodeBob,
	CurrencyCodeBwp,
	CurrencyCodeBnd,
	CurrencyCodeBgn,
	CurrencyCodeMmk,
	CurrencyCodeKhr,
	CurrencyCodeCve,
	CurrencyCodeKyd,
	CurrencyCodeXaf,
	CurrencyCodeClp,
	CurrencyCodeCny,
	CurrencyCodeCop,
	CurrencyCodeKmf,
	CurrencyCodeCdf,
	CurrencyCodeCrc,
	CurrencyCodeHrk,
	CurrencyCodeCzk,
	CurrencyCodeDkk,
	CurrencyCodeDjf,
	CurrencyCodeDop,
	CurrencyCodeXcd,
	CurrencyCodeEgp,
	CurrencyCodeErn,
	CurrencyCodeEtb,
	CurrencyCodeFkp,
	CurrencyCodeXpf,
	CurrencyCodeFjd,
	CurrencyCodeGip,
	CurrencyCodeGmd,
	CurrencyCodeGhs,
	CurrencyCodeGtq,
	CurrencyCodeGyd,
	CurrencyCodeGel,
	CurrencyCodeGnf,
	CurrencyCodeHtg,
	CurrencyCodeHnl,
	CurrencyCodeHkd,
	CurrencyCodeHuf,
	CurrencyCodeIsk,
	CurrencyCodeInr,
	CurrencyCodeIdr,
	CurrencyCodeIls,
	CurrencyCodeIrr,
	CurrencyCodeIqd,
	CurrencyCodeJmd,
	CurrencyCodeJpy,
	CurrencyCodeJep,
	CurrencyCodeJod,
	CurrencyCodeKzt,
	CurrencyCodeKes,
	CurrencyCodeKid,
	CurrencyCodeKwd,
	CurrencyCodeKgs,
	CurrencyCodeLak,
	CurrencyCodeLvl,
	CurrencyCodeLbp,
	CurrencyCodeLsl,
	CurrencyCodeLrd,
	CurrencyCodeLyd,
	CurrencyCodeLtl,
	CurrencyCodeMga,
	CurrencyCodeMkd,
	CurrencyCodeMop,
	CurrencyCodeMwk,
	CurrencyCodeMvr,
	CurrencyCodeMru,
	CurrencyCodeMxn,
	CurrencyCodeMyr,
	CurrencyCodeMur,
	CurrencyCodeMdl,
	CurrencyCodeMad,
	CurrencyCodeMnt,
	CurrencyCodeMzn,
	CurrencyCodeNad,
	CurrencyCodeNpr,
	CurrencyCodeAng,
	CurrencyCodeNzd,
	CurrencyCodeNio,
	CurrencyCodeNgn,
	CurrencyCodeNok,
	CurrencyCodeOmr,
	CurrencyCodePab,
	CurrencyCodePkr,
	CurrencyCodePgk,
	CurrencyCodePyg,
	CurrencyCodePen,
	CurrencyCodePhp,
	CurrencyCodePln,
	CurrencyCodeQar,
	CurrencyCodeRon,
	CurrencyCodeRub,
	CurrencyCodeRwf,
	CurrencyCodeWst,
	CurrencyCodeShp,
	CurrencyCodeSar,
	CurrencyCodeRsd,
	CurrencyCodeScr,
	CurrencyCodeSll,
	CurrencyCodeSgd,
	CurrencyCodeSdg,
	CurrencyCodeSos,
	CurrencyCodeSyp,
	CurrencyCodeZar,
	CurrencyCodeKrw,
	CurrencyCodeSsp,
	CurrencyCodeSbd,
	CurrencyCodeLkr,
	CurrencyCodeSrd,
	CurrencyCodeSzl,
	CurrencyCodeSek,
	CurrencyCodeChf,
	CurrencyCodeTwd,
	CurrencyCodeThb,
	CurrencyCodeTjs,
	CurrencyCodeTzs,
	CurrencyCodeTop,
	CurrencyCodeTtd,
	CurrencyCodeTnd,
	CurrencyCodeTry,
	CurrencyCodeTmt,
	CurrencyCodeUgx,
	CurrencyCodeUah,
	CurrencyCodeAed,
	CurrencyCodeUyu,
	CurrencyCodeUzs,
	CurrencyCodeVuv,
	CurrencyCodeVes,
	CurrencyCodeVnd,
	CurrencyCodeXof,
	CurrencyCodeYer,
	CurrencyCodeZmw,
	CurrencyCodeUsdc,
	CurrencyCodeByr,
	CurrencyCodeStd,
	CurrencyCodeStn,
	CurrencyCodeVed,
	CurrencyCodeVef,
	CurrencyCodeXxx,
}

// The input fields and values to use when creating or updating a customer.
type CustomerInput struct {
	// The addresses for a customer.
	Addresses []MailingAddressInput `json:"addresses"`
	// The unique email address of the customer.
	Email string `json:"email"`
	// The customer's first name.
	FirstName string `json:"firstName"`
	// The customer's last name.
	LastName string `json:"lastName"`
	// The customer's locale.
	Locale string `json:"locale"`
	// Additional metafields to associate to the customer.
	Metafields []MetafieldInput `json:"metafields"`
	// A note about the customer.
	Note string `json:"note"`
	// The unique phone number for the customer.
	Phone string `json:"phone"`
	// A list of tags to associate with the customer. Can be an array or a
	// comma-separated list. Example values: `["tag1", "tag2", "tag3"]`, `"tag1, tag2, tag3"`
	//
	// Updating `tags` overwrites any existing tags that were previously added to the
	// customer. To add new tags without overwriting
	// existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
	// mutation.
	Tags []string `json:"tags"`
	// Whether the customer is exempt from paying taxes on their order.
	TaxExempt bool `json:"taxExempt"`
	// The list of tax exemptions to apply to the customer.
	TaxExemptions []TaxExemption `json:"taxExemptions"`
}

// GetAddresses returns CustomerInput.Addresses, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetAddresses() []MailingAddressInput { return v.Addresses }

// GetEmail returns CustomerInput.Email, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetEmail() string { return v.Email }

// GetFirstName returns CustomerInput.FirstName, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetFirstName() string { return v.FirstName }

// GetLastName returns CustomerInput.LastName, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetLastName() string { return v.LastName }

// GetLocale returns CustomerInput.Locale, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetLocale() string { return v.Locale }

// GetMetafields returns CustomerInput.Metafields, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetMetafields() []MetafieldInput { return v.Metafields }

// GetNote returns CustomerInput.Note, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetNote() string { return v.Note }

// GetPhone returns CustomerInput.Phone, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetPhone() string { return v.Phone }

// GetTags returns CustomerInput.Tags, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetTags() []string { return v.Tags }

// GetTaxExempt returns CustomerInput.TaxExempt, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetTaxExempt() bool { return v.TaxExempt }

// GetTaxExemptions returns CustomerInput.TaxExemptions, and is useful for accessing the field via an interface.
func (v *CustomerInput) GetTaxExemptions() []TaxExemption { return v.TaxExemptions }

// DeliveryProfilesDeliveryProfilesDeliveryProfileConnection includes the requested fields of the GraphQL type DeliveryProfileConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple DeliveryProfiles.
type DeliveryProfilesDeliveryProfilesDeliveryProfileConnection struct {
	// A list of nodes that are contained in DeliveryProfileEdge. You can fetch data
	// about an individual node, or you can follow the edges to fetch data about a
	// collection of related nodes. At each node, you specify the fields that you
	// want to retrieve.
	Nodes []DeliveryProfilesDeliveryProfilesDeliveryProfileConnectionNodesDeliveryProfile `json:"nodes"`
}

// GetNodes returns DeliveryProfilesDeliveryProfilesDeliveryProfileConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DeliveryProfilesDeliveryProfilesDeliveryProfileConnection) GetNodes() []DeliveryProfilesDeliveryProfilesDeliveryProfileConnectionNodesDeliveryProfile {
	return v.Nodes
}

// DeliveryProfilesDeliveryProfilesDeliveryProfileConnectionNodesDeliveryProfile includes the requested fields of the GraphQL type DeliveryProfile.
// The GraphQL type's documentation follows.
//
// A shipping profile. In Shopify, a shipping profile is a set of shipping rates
// scoped to a set of products or variants that can be shipped from selected
// locations to zones. Learn more about [building with delivery profiles](https://shopify.dev/apps/build/purchase-options/deferred/delivery-and-deferment/build-delivery-profiles).
type DeliveryProfilesDeliveryProfilesDeliveryProfileConnectionNodesDeliveryProfile struct {
	// A globally-unique ID.
	Id string `json:"id"`
	// The name of the delivery profile.
	Name string `json:"name"`
}

// GetId returns DeliveryProfilesDeliveryProfilesDeliveryProfileConnectionNodesDeliveryProfile.Id, and is useful for accessing the field via an interface.
func (v *DeliveryProfilesDeliveryProfilesDeliveryProfileConnectionNodesDeliveryProfile) GetId() string {
	return v.Id
}

// GetName returns DeliveryProfilesDeliveryProfilesDeliveryProfileConnectionNodesDeliveryProfile.Name, and is useful for accessing the field via an interface.
func (v *DeliveryProfilesDeliveryProfilesDeliveryProfileConnectionNodesDeliveryProfile) GetName() string {
	return v.Name
}

// DeliveryProfilesResponse is returned by DeliveryProfiles on success.
type DeliveryProfilesResponse struct {
	// Returns a list of saved delivery profiles.
	DeliveryProfiles DeliveryProfilesDeliveryProfilesDeliveryProfileConnection `json:"deliveryProfiles"`
}

// GetDeliveryProfiles returns DeliveryProfilesResponse.DeliveryProfiles, and is useful for accessing the field via an interface.
func (v *DeliveryProfilesResponse) GetDeliveryProfiles() DeliveryProfilesDeliveryProfilesDeliveryProfileConnection {
	return v.DeliveryProfiles
}

// DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayload includes the requested fields of the GraphQL type DraftOrderCompletePayload.
// The GraphQL type's documentation follows.
//
// Return type for `draftOrderComplete` mutation.
type DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayload struct {
	// The completed draft order.
	DraftOrder DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayloadDraftOrder `json:"draftOrder"`
}

// GetDraftOrder returns DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayload.DraftOrder, and is useful for accessing the field via an interface.
func (v *DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayload) GetDraftOrder() DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayloadDraftOrder {
	return v.DraftOrder
}

// DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayloadDraftOrder includes the requested fields of the GraphQL type DraftOrder.
// The GraphQL type's documentation follows.
//
// An order that a merchant creates on behalf of a customer. Draft orders are
// useful for merchants that need to do the following tasks:
//
// - Create new orders for sales made by phone, in person, by chat, or elsewhere.
// When a merchant accepts payment for a draft order, an order is created.
// - Send invoices to customers to pay with a secure checkout link.
// - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
// - Re-create orders manually from active sales channels.
// - Sell products at discount or wholesale rates.
// - Take pre-orders.
//
// For draft orders in multiple currencies `presentment_money` is the source of
// truth for what a customer is going to be charged and `shop_money` is an estimate
// of what the merchant might receive in their shop currency.
//
// **Caution:** Only use this data if it's required for your app's functionality.
// Shopify will restrict [access to
// scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
// legitimate use for the associated data.
//
// Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
type DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayloadDraftOrder struct {
	// A globally-unique ID.
	Id string `json:"id"`
}

// GetId returns DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayloadDraftOrder.Id, and is useful for accessing the field via an interface.
func (v *DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayloadDraftOrder) GetId() string {
	return v.Id
}

// DraftOrderCompleteResponse is returned by DraftOrderComplete on success.
type DraftOrderCompleteResponse struct {
	// Completes a [draft order](https://shopify.dev/docs/api/admin-graphql/latest/objects/DraftOrder) and
	// converts it into a [regular order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order).
	// The order appears in the merchant's orders list, and the customer can be notified about their order.
	//
	// Use the `draftOrderComplete` mutation when a merchant is ready to finalize a draft order and create a real
	// order in their store. The `draftOrderComplete` mutation also supports sales channel attribution for tracking
	// order sources using the [`sourceName`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderComplete#arguments-sourceName)
	// argument, [cart validation](https://shopify.dev/docs/apps/build/checkout/cart-checkout-validation)
	// controls for app integrations, and detailed error reporting for failed completions.
	//
	// You can complete a draft order with different [payment scenarios](https://help.shopify.com/manual/fulfillment/managing-orders/payments):
	//
	// - Mark the order as paid immediately.
	// - Set the order as payment pending using [payment terms](https://shopify.dev/docs/api/admin-graphql/latest/objects/PaymentTerms).
	// - Specify a custom payment amount.
	// - Select a specific payment gateway.
	//
	// > Note:
	// > When completing a draft order, inventory is [reserved](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps#inventory-states)
	// for the items in the order. This means the items will no longer be available for other customers to purchase.
	// Make sure to verify inventory availability before completing the draft order.
	DraftOrderComplete DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayload `json:"draftOrderComplete"`
}

// GetDraftOrderComplete returns DraftOrderCompleteResponse.DraftOrderComplete, and is useful for accessing the field via an interface.
func (v *DraftOrderCompleteResponse) GetDraftOrderComplete() DraftOrderCompleteDraftOrderCompleteDraftOrderCompletePayload {
	return v.DraftOrderComplete
}

// FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2Payload includes the requested fields of the GraphQL type FulfillmentCreateV2Payload.
// The GraphQL type's documentation follows.
//
// Return type for `fulfillmentCreateV2` mutation.
type FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2Payload struct {
	// The created fulfillment.
	Fulfillment FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadFulfillment `json:"fulfillment"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadUserErrorsUserError `json:"userErrors"`
}

// GetFulfillment returns FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2Payload.Fulfillment, and is useful for accessing the field via an interface.
func (v *FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2Payload) GetFulfillment() FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadFulfillment {
	return v.Fulfillment
}

// GetUserErrors returns FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2Payload.UserErrors, and is useful for accessing the field via an interface.
func (v *FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2Payload) GetUserErrors() []FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadUserErrorsUserError {
	return v.UserErrors
}

// FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadFulfillment includes the requested fields of the GraphQL type Fulfillment.
// The GraphQL type's documentation follows.
//
// Represents a fulfillment.
// In Shopify, a fulfillment represents a shipment of one or more items in an order.
// When an order has been completely fulfilled, it means that all the items that are included
// in the order have been sent to the customer.
// There can be more than one fulfillment for an order.
type FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadFulfillment struct {
	// A globally-unique ID.
	Id string `json:"id"`
	// The status of the fulfillment.
	Status FulfillmentStatus `json:"status"`
}

// GetId returns FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadFulfillment.Id, and is useful for accessing the field via an interface.
func (v *FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadFulfillment) GetId() string {
	return v.Id
}

// GetStatus returns FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadFulfillment.Status, and is useful for accessing the field via an interface.
func (v *FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadFulfillment) GetStatus() FulfillmentStatus {
	return v.Status
}

// FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadUserErrorsUserError includes the requested fields of the GraphQL type UserError.
// The GraphQL type's documentation follows.
//
// Represents an error in the input of a mutation.
type FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadUserErrorsUserError struct {
	// The path to the input field that caused the error.
	Field []string `json:"field"`
	// The error message.
	Message string `json:"message"`
}

// GetField returns FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadUserErrorsUserError.Field, and is useful for accessing the field via an interface.
func (v *FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadUserErrorsUserError) GetField() []string {
	return v.Field
}

// GetMessage returns FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadUserErrorsUserError.Message, and is useful for accessing the field via an interface.
func (v *FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2PayloadUserErrorsUserError) GetMessage() string {
	return v.Message
}

// FulfillmentCreateV2Response is returned by FulfillmentCreateV2 on success.
type FulfillmentCreateV2Response struct {
	// Creates a fulfillment for one or many fulfillment orders.
	// The fulfillment orders are associated with the same order and are assigned to the same location.
	FulfillmentCreateV2 FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2Payload `json:"fulfillmentCreateV2"`
}

// GetFulfillmentCreateV2 returns FulfillmentCreateV2Response.FulfillmentCreateV2, and is useful for accessing the field via an interface.
func (v *FulfillmentCreateV2Response) GetFulfillmentCreateV2() FulfillmentCreateV2FulfillmentCreateV2FulfillmentCreateV2Payload {
	return v.FulfillmentCreateV2
}

// The input fields used to include the quantity of the fulfillment order line item that should be fulfilled.
type FulfillmentOrderLineItemInput struct {
	// The ID of the fulfillment order line item.
	Id string `json:"id"`
	// The quantity of the fulfillment order line item.
	Quantity int `json:"quantity"`
}

// GetId returns FulfillmentOrderLineItemInput.Id, and is useful for accessing the field via an interface.
func (v *FulfillmentOrderLineItemInput) GetId() string { return v.Id }

// GetQuantity returns FulfillmentOrderLineItemInput.Quantity, and is useful for accessing the field via an interface.
func (v *FulfillmentOrderLineItemInput) GetQuantity() int { return v.Quantity }

// The input fields used to include the line items of a specified fulfillment order that should be fulfilled.
type FulfillmentOrderLineItemsInput struct {
	// The ID of the fulfillment order.
	FulfillmentOrderId string `json:"fulfillmentOrderId"`
	// The fulfillment order line items to be fulfilled.
	// If left blank, all line items of the fulfillment order will be fulfilled.
	FulfillmentOrderLineItems []FulfillmentOrderLineItemInput `json:"fulfillmentOrderLineItems"`
}

// GetFulfillmentOrderId returns FulfillmentOrderLineItemsInput.FulfillmentOrderId, and is useful for accessing the field via an interface.
func (v *FulfillmentOrderLineItemsInput) GetFulfillmentOrderId() string { return v.FulfillmentOrderId }

// GetFulfillmentOrderLineItems returns FulfillmentOrderLineItemsInput.FulfillmentOrderLineItems, and is useful for accessing the field via an interface.
func (v *FulfillmentOrderLineItemsInput) GetFulfillmentOrderLineItems() []FulfillmentOrderLineItemInput {
	return v.FulfillmentOrderLineItems
}

// The status of a fulfillment order.
type FulfillmentOrderStatus string

const (
	// The fulfillment order is ready for fulfillment.
	FulfillmentOrderStatusOpen FulfillmentOrderStatus = "OPEN"
	// The fulfillment order is being processed.
	FulfillmentOrderStatusInProgress FulfillmentOrderStatus = "IN_PROGRESS"
	// The fulfillment order has been cancelled by the merchant.
	FulfillmentOrderStatusCancelled FulfillmentOrderStatus = "CANCELLED"
	// The fulfillment order cannot be completed as requested.
	FulfillmentOrderStatusIncomplete FulfillmentOrderStatus = "INCOMPLETE"
	// The fulfillment order has been completed and closed.
	FulfillmentOrderStatusClosed FulfillmentOrderStatus = "CLOSED"
	// The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`.
	FulfillmentOrderStatusScheduled FulfillmentOrderStatus = "SCHEDULED"
	// The fulfillment order is on hold. The fulfillment process can't be initiated
	// until the hold on the fulfillment order is released.
	FulfillmentOrderStatusOnHold FulfillmentOrderStatus = "ON_HOLD"
)

var AllFulfillmentOrderStatus = []FulfillmentOrderStatus{
	FulfillmentOrderStatusOpen,
	FulfillmentOrderStatusInProgress,
	FulfillmentOrderStatusCancelled,
	FulfillmentOrderStatusIncomplete,
	FulfillmentOrderStatusClosed,
	FulfillmentOrderStatusScheduled,
	FulfillmentOrderStatusOnHold,
}

// The input fields used to include the address at which the fulfillment occurred.
// This input object is intended for tax purposes, as a full address is required
// for tax providers to accurately calculate taxes. Typically this is the address
// of the warehouse or fulfillment center. To retrieve a fulfillment location's
// address, use the `assignedLocation` field on the
// [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder)
// object instead.
type FulfillmentOriginAddressInput struct {
	// The street address of the fulfillment location.
	Address1 string `json:"address1"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 string `json:"address2"`
	// The city in which the fulfillment location is located.
	City string `json:"city"`
	// The zip code of the fulfillment location.
	Zip string `json:"zip"`
	// The province of the fulfillment location.
	ProvinceCode string `json:"provinceCode"`
	// The country of the fulfillment location.
	CountryCode string `json:"countryCode"`
}

// GetAddress1 returns FulfillmentOriginAddressInput.Address1, and is useful for accessing the field via an interface.
func (v *FulfillmentOriginAddressInput) GetAddress1() string { return v.Address1 }

// GetAddress2 returns FulfillmentOriginAddressInput.Address2, and is useful for accessing the field via an interface.
func (v *FulfillmentOriginAddressInput) GetAddress2() string { return v.Address2 }

// GetCity returns FulfillmentOriginAddressInput.City, and is useful for accessing the field via an interface.
func (v *FulfillmentOriginAddressInput) GetCity() string { return v.City }

// GetZip returns FulfillmentOriginAddressInput.Zip, and is useful for accessing the field via an interface.
func (v *FulfillmentOriginAddressInput) GetZip() string { return v.Zip }

// GetProvinceCode returns FulfillmentOriginAddressInput.ProvinceCode, and is useful for accessing the field via an interface.
func (v *FulfillmentOriginAddressInput) GetProvinceCode() string { return v.ProvinceCode }

// GetCountryCode returns FulfillmentOriginAddressInput.CountryCode, and is useful for accessing the field via an interface.
func (v *FulfillmentOriginAddressInput) GetCountryCode() string { return v.CountryCode }

// The type of a fulfillment service.
type FulfillmentServiceType string

const (
	// Fulfillment by gift card.
	FulfillmentServiceTypeGiftCard FulfillmentServiceType = "GIFT_CARD"
	// Manual fulfillment by the merchant.
	FulfillmentServiceTypeManual FulfillmentServiceType = "MANUAL"
	// Fullfillment by a third-party fulfillment service.
	FulfillmentServiceTypeThirdParty FulfillmentServiceType = "THIRD_PARTY"
)

var AllFulfillmentServiceType = []FulfillmentServiceType{
	FulfillmentServiceTypeGiftCard,
	FulfillmentServiceTypeManual,
	FulfillmentServiceTypeThirdParty,
}

// The status of a fulfillment.
type FulfillmentStatus string

const (
	// Shopify has created the fulfillment and is waiting for the third-party
	// fulfillment service to transition it to `open` or `success`.
	FulfillmentStatusPending FulfillmentStatus = "PENDING"
	// The third-party fulfillment service has acknowledged the fulfillment and is processing it.
	FulfillmentStatusOpen FulfillmentStatus = "OPEN"
	// The fulfillment was completed successfully.
	FulfillmentStatusSuccess FulfillmentStatus = "SUCCESS"
	// The fulfillment was canceled.
	FulfillmentStatusCancelled FulfillmentStatus = "CANCELLED"
	// There was an error with the fulfillment request.
	FulfillmentStatusError FulfillmentStatus = "ERROR"
	// The fulfillment request failed.
	FulfillmentStatusFailure FulfillmentStatus = "FAILURE"
)

var AllFulfillmentStatus = []FulfillmentStatus{
	FulfillmentStatusPending,
	FulfillmentStatusOpen,
	FulfillmentStatusSuccess,
	FulfillmentStatusCancelled,
	FulfillmentStatusError,
	FulfillmentStatusFailure,
}

// The input fields that specify all possible fields for tracking information.
//
// > Note:
// > If you provide the `url` field, you should not provide the `urls` field.
// >
// > If you provide the `number` field, you should not provide the `numbers` field.
// >
// > If you provide the `url` field, you should provide the `number` field.
// >
// > If you provide the `urls` field, you should provide the `numbers` field.
type FulfillmentTrackingInput struct {
	// The tracking number of the fulfillment.
	//
	// The tracking number will be clickable in the interface if one of the following applies
	// (the highest in the list has the highest priority):
	//
	// * Tracking url provided in the `url` field.
	// * [Shopify-known tracking company name](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
	// specified in the `company` field.
	// Shopify will build the tracking URL automatically based on the tracking number specified.
	// * The tracking number has a Shopify-known format.
	// Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
	// Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
	// This can result in an invalid tracking URL.
	// It is highly recommended that you send the tracking company and the tracking URL.
	Number string `json:"number"`
	// The URL to track the fulfillment.
	//
	// The tracking URL is displayed in the merchant's admin on the order page.
	// The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
	// When accounts are enabled, it's also displayed in the customer's order history.
	//
	// The URL must be an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
	// [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
	// For example, `"https://www.myshipping.com/track/?tracknumbers=TRACKING_NUMBER"` is a valid URL.
	// It includes a scheme (`https`) and a host (`myshipping.com`).
	Url string `json:"url"`
	// The name of the tracking company.
	//
	// If you specify a tracking company name from
	// [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies),
	// Shopify will automatically build tracking URLs for all provided tracking numbers,
	// which will make the tracking numbers clickable in the interface.
	// The same tracking company will be applied to all tracking numbers specified.
	//
	// Additionally, for the tracking companies listed on the
	// [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
	// Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
	//
	// > Note:
	// > Send the tracking company name exactly as written in
	// > [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
	// > (capitalization matters).
	Company string `json:"company"`
	// The tracking numbers of the fulfillment, one or many.
	//
	// With multiple tracking numbers, you can provide tracking information
	// for all shipments associated with the fulfillment, if there are more than one.
	// For example, if you're shipping assembly parts of one furniture item in several boxes.
	//
	// Tracking numbers will be clickable in the interface if one of the following applies
	// (the highest in the list has the highest priority):
	//
	// * Tracking URLs provided in the `urls` field.
	// The tracking URLs will be matched to the tracking numbers based on their positions in the arrays.
	// * [Shopify-known tracking company name](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
	// specified in the `company` field.
	// Shopify will build tracking URLs automatically for all tracking numbers specified.
	// The same tracking company will be applied to all tracking numbers.
	// * Tracking numbers have a Shopify-known format.
	// Shopify will guess tracking providers and build tracking URLs based on the tracking number formats.
	// Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
	// This can result in an invalid tracking URL.
	// It is highly recommended that you send the tracking company and the tracking URLs.
	Numbers []string `json:"numbers"`
	// The URLs to track the fulfillment, one or many.
	//
	// The tracking URLs are displayed in the merchant's admin on the order page.
	// The tracking URLs are displayed in the shipping confirmation email, which can optionally be sent to the customer.
	// When accounts are enabled, the tracking URLs are also displayed in the customer's order history.
	//
	// If you're not specifying a
	// [Shopify-known](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
	// tracking company name in the `company` field,
	// then provide tracking URLs for all tracking numbers from the `numbers` field.
	//
	// Tracking URLs from the `urls` array field are being matched with the tracking numbers from the `numbers` array
	// field correspondingly their positions in the arrays.
	//
	// Each URL must be an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
	// [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
	// For example, `"https://www.myshipping.com/track/?tracknumbers=TRACKING_NUMBER"` is a valid URL.
	// It includes a scheme (`https`) and a host (`myshipping.com`).
	Urls []string `json:"urls"`
}

// GetNumber returns FulfillmentTrackingInput.Number, and is useful for accessing the field via an interface.
func (v *FulfillmentTrackingInput) GetNumber() string { return v.Number }

// GetUrl returns FulfillmentTrackingInput.Url, and is useful for accessing the field via an interface.
func (v *FulfillmentTrackingInput) GetUrl() string { return v.Url }

// GetCompany returns FulfillmentTrackingInput.Company, and is useful for accessing the field via an interface.
func (v *FulfillmentTrackingInput) GetCompany() string { return v.Company }

// GetNumbers returns FulfillmentTrackingInput.Numbers, and is useful for accessing the field via an interface.
func (v *FulfillmentTrackingInput) GetNumbers() []string { return v.Numbers }

// GetUrls returns FulfillmentTrackingInput.Urls, and is useful for accessing the field via an interface.
func (v *FulfillmentTrackingInput) GetUrls() []string { return v.Urls }

// The input fields used to create a fulfillment from fulfillment orders.
type FulfillmentV2Input struct {
	// The fulfillment's tracking information, including a tracking URL, a tracking number,
	// and the company associated with the fulfillment.
	TrackingInfo FulfillmentTrackingInput `json:"trackingInfo"`
	// Whether the customer is notified.
	// If `true`, then a notification is sent when the fulfillment is created. The default value is `false`.
	NotifyCustomer bool `json:"notifyCustomer"`
	// Pairs of `fulfillment_order_id` and `fulfillment_order_line_items` that represent the fulfillment
	// order line items that have to be fulfilled for each fulfillment order.  For any given pair, if the
	// fulfillment order line items are left blank then all the fulfillment order line items of the
	// associated fulfillment order ID will be fulfilled.
	LineItemsByFulfillmentOrder []FulfillmentOrderLineItemsInput `json:"lineItemsByFulfillmentOrder"`
	// Address information about the location from which the order was fulfilled.
	OriginAddress FulfillmentOriginAddressInput `json:"originAddress"`
}

// GetTrackingInfo returns FulfillmentV2Input.TrackingInfo, and is useful for accessing the field via an interface.
func (v *FulfillmentV2Input) GetTrackingInfo() FulfillmentTrackingInput { return v.TrackingInfo }

// GetNotifyCustomer returns FulfillmentV2Input.NotifyCustomer, and is useful for accessing the field via an interface.
func (v *FulfillmentV2Input) GetNotifyCustomer() bool { return v.NotifyCustomer }

// GetLineItemsByFulfillmentOrder returns FulfillmentV2Input.LineItemsByFulfillmentOrder, and is useful for accessing the field via an interface.
func (v *FulfillmentV2Input) GetLineItemsByFulfillmentOrder() []FulfillmentOrderLineItemsInput {
	return v.LineItemsByFulfillmentOrder
}

// GetOriginAddress returns FulfillmentV2Input.OriginAddress, and is useful for accessing the field via an interface.
func (v *FulfillmentV2Input) GetOriginAddress() FulfillmentOriginAddressInput { return v.OriginAddress }

// GetCustomerCustomersCustomerConnection includes the requested fields of the GraphQL type CustomerConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Customers.
type GetCustomerCustomersCustomerConnection struct {
	// A list of nodes that are contained in CustomerEdge. You can fetch data about
	// an individual node, or you can follow the edges to fetch data about a
	// collection of related nodes. At each node, you specify the fields that you
	// want to retrieve.
	Nodes []GetCustomerCustomersCustomerConnectionNodesCustomer `json:"nodes"`
}

// GetNodes returns GetCustomerCustomersCustomerConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetCustomerCustomersCustomerConnection) GetNodes() []GetCustomerCustomersCustomerConnectionNodesCustomer {
	return v.Nodes
}

// GetCustomerCustomersCustomerConnectionNodesCustomer includes the requested fields of the GraphQL type Customer.
// The GraphQL type's documentation follows.
//
// Represents information about a customer of the shop, such as the customer's contact details, their order
// history, and whether they've agreed to receive marketing material by email.
//
// **Caution:** Only use this data if it's required for your app's functionality.
// Shopify will restrict [access to
// scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
// legitimate use for the associated data.
type GetCustomerCustomersCustomerConnectionNodesCustomer struct {
	// A globally-unique ID.
	Id string `json:"id"`
	// The customer's first name.
	FirstName string `json:"firstName"`
	// The customer's last name.
	LastName string `json:"lastName"`
}

// GetId returns GetCustomerCustomersCustomerConnectionNodesCustomer.Id, and is useful for accessing the field via an interface.
func (v *GetCustomerCustomersCustomerConnectionNodesCustomer) GetId() string { return v.Id }

// GetFirstName returns GetCustomerCustomersCustomerConnectionNodesCustomer.FirstName, and is useful for accessing the field via an interface.
func (v *GetCustomerCustomersCustomerConnectionNodesCustomer) GetFirstName() string {
	return v.FirstName
}

// GetLastName returns GetCustomerCustomersCustomerConnectionNodesCustomer.LastName, and is useful for accessing the field via an interface.
func (v *GetCustomerCustomersCustomerConnectionNodesCustomer) GetLastName() string { return v.LastName }

// GetCustomerResponse is returned by GetCustomer on success.
type GetCustomerResponse struct {
	// Returns a list of
	// [customers](https://shopify.dev/api/admin-graphql/latest/objects/Customer) in
	// your Shopify store, including key information such as name, email, location,
	// and purchase history.
	// Use this query to segment your audience, personalize marketing campaigns, or
	// analyze customer behavior by applying filters based on location, order
	// history, marketing preferences and tags.
	// The `customers` query supports
	// [pagination](https://shopify.dev/api/usage/pagination-graphql) and [sorting](https://shopify.dev/api/admin-graphql/latest/enums/CustomerSortKeys).
	Customers GetCustomerCustomersCustomerConnection `json:"customers"`
}

// GetCustomers returns GetCustomerResponse.Customers, and is useful for accessing the field via an interface.
func (v *GetCustomerResponse) GetCustomers() GetCustomerCustomersCustomerConnection {
	return v.Customers
}

// GetDraftOrderDraftOrdersDraftOrderConnection includes the requested fields of the GraphQL type DraftOrderConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple DraftOrders.
type GetDraftOrderDraftOrdersDraftOrderConnection struct {
	// A list of nodes that are contained in DraftOrderEdge. You can fetch data about
	// an individual node, or you can follow the edges to fetch data about a
	// collection of related nodes. At each node, you specify the fields that you
	// want to retrieve.
	Nodes []GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder `json:"nodes"`
}

// GetNodes returns GetDraftOrderDraftOrdersDraftOrderConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetDraftOrderDraftOrdersDraftOrderConnection) GetNodes() []GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder {
	return v.Nodes
}

// GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder includes the requested fields of the GraphQL type DraftOrder.
// The GraphQL type's documentation follows.
//
// An order that a merchant creates on behalf of a customer. Draft orders are
// useful for merchants that need to do the following tasks:
//
// - Create new orders for sales made by phone, in person, by chat, or elsewhere.
// When a merchant accepts payment for a draft order, an order is created.
// - Send invoices to customers to pay with a secure checkout link.
// - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
// - Re-create orders manually from active sales channels.
// - Sell products at discount or wholesale rates.
// - Take pre-orders.
//
// For draft orders in multiple currencies `presentment_money` is the source of
// truth for what a customer is going to be charged and `shop_money` is an estimate
// of what the merchant might receive in their shop currency.
//
// **Caution:** Only use this data if it's required for your app's functionality.
// Shopify will restrict [access to
// scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
// legitimate use for the associated data.
//
// Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
type GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder struct {
	// A globally-unique ID.
	Id string `json:"id"`
	// The identifier for the draft order, which is unique within the store. For example, _#D1223_.
	Name string `json:"name"`
	// The email address of the customer, which is used to send notifications.
	Email string `json:"email"`
	// The assigned phone number.
	Phone string `json:"phone"`
}

// GetId returns GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder.Id, and is useful for accessing the field via an interface.
func (v *GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder) GetId() string { return v.Id }

// GetName returns GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder.Name, and is useful for accessing the field via an interface.
func (v *GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder) GetName() string { return v.Name }

// GetEmail returns GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder.Email, and is useful for accessing the field via an interface.
func (v *GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder) GetEmail() string {
	return v.Email
}

// GetPhone returns GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder.Phone, and is useful for accessing the field via an interface.
func (v *GetDraftOrderDraftOrdersDraftOrderConnectionNodesDraftOrder) GetPhone() string {
	return v.Phone
}

// GetDraftOrderResponse is returned by GetDraftOrder on success.
type GetDraftOrderResponse struct {
	// List of saved draft orders.
	DraftOrders GetDraftOrderDraftOrdersDraftOrderConnection `json:"draftOrders"`
}

// GetDraftOrders returns GetDraftOrderResponse.DraftOrders, and is useful for accessing the field via an interface.
func (v *GetDraftOrderResponse) GetDraftOrders() GetDraftOrderDraftOrdersDraftOrderConnection {
	return v.DraftOrders
}

// GetFulfillmentFulfillment includes the requested fields of the GraphQL type Fulfillment.
// The GraphQL type's documentation follows.
//
// Represents a fulfillment.
// In Shopify, a fulfillment represents a shipment of one or more items in an order.
// When an order has been completely fulfilled, it means that all the items that are included
// in the order have been sent to the customer.
// There can be more than one fulfillment for an order.
type GetFulfillmentFulfillment struct {
	// The status of the fulfillment.
	Status FulfillmentStatus `json:"status"`
}

// GetStatus returns GetFulfillmentFulfillment.Status, and is useful for accessing the field via an interface.
func (v *GetFulfillmentFulfillment) GetStatus() FulfillmentStatus { return v.Status }

// GetFulfillmentOrderFulfillmentOrder includes the requested fields of the GraphQL type FulfillmentOrder.
// The GraphQL type's documentation follows.
//
// The FulfillmentOrder object represents either an item or a group of items in an
// [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
// that are expected to be fulfilled from the same location.
// There can be more than one fulfillment order for an
// [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
// at a given location.
//
// {{ '/api/reference/fulfillment_order_relationships.png' | image }}
//
// Fulfillment orders represent the work which is intended to be done in relation to an order.
// When fulfillment has started for one or more line items, a
// [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
// is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
//
// [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
//
// > Note:
// > Shopify creates fulfillment orders automatically when an order is created.
// > It is not possible to manually create fulfillment orders.
// >
// > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
//
// ## Retrieving fulfillment orders
//
// ### Fulfillment orders from an order
//
// All fulfillment orders related to a given order can be retrieved with the
// [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
// connection.
//
// [API access scopes](#api-access-scopes)
// govern which fulfillments orders are returned to clients.
// An API client will only receive a subset of the fulfillment orders which belong to an order
// if they don't have the necessary access scopes to view all of the fulfillment orders.
//
// ### Fulfillment orders assigned to the app for fulfillment
//
// Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
// [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
// connection.
// Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
// should be returned or only those where a merchant has sent a
// [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
// and it has yet to be responded to.
//
// The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
// the assigned fulfillment orders.
//
// ### All fulfillment orders
//
// Apps can retrieve all fulfillment orders with the
// [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
// query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
// which are accessible to the app according to the
// [fulfillment order access scopes](#api-access-scopes) it was granted with.
//
// ## The lifecycle of a fulfillment order
//
// ### Fulfillment Order Creation
//
// After an order is created, a background worker performs the order routing process which determines
// which locations will be responsible for fulfilling the purchased items.
// Once the order routing process is complete, one or more fulfillment orders will be created
// and assigned to these locations. It is not possible to manually create fulfillment orders.
//
// Once a fulfillment order has been created, it will have one of two different lifecycles depending on
// the type of location which the fulfillment order is assigned to.
//
// ### The lifecycle of a fulfillment order at a merchant managed location
//
// Fulfillment orders are completed by creating
// [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
// Fulfillments represents the work done.
//
// For digital products a merchant or an order management app would create a fulfilment once the digital asset
// has been provisioned.
// For example, in the case of a digital gift card, a merchant would to do this once
// the gift card has been activated - before the email has been shipped.
//
// On the other hand, for a traditional shipped order,
// a merchant or an order management app would create a fulfillment after picking and packing the items relating
// to a fulfillment order, but before the courier has collected the goods.
//
// [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
//
// ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
//
// For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
// a merchant or an Order Management App can
// [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
// to the fulfillment service which operates the location to request that they fulfill the associated items.
// A fulfillment service has the option to
// [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
// or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
// this fulfillment request.
//
// Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
// or order management app and instead a
// [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
// to the fulfillment service.
//
// Once a fulfillment service accepts a fulfillment request,
// then after they are ready to pack items and send them for delivery, they create fulfillments with the
// [fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
// mutation.
// They can provide tracking information right away or create fulfillments without it and then
// update the tracking information for fulfillments with the
// [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
// mutation.
//
// [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
//
// ## API access scopes
//
// Fulfillment orders are governed by the following API access scopes:
//
// * The `read_merchant_managed_fulfillment_orders` and
// `write_merchant_managed_fulfillment_orders` access scopes
// grant access to fulfillment orders assigned to merchant-managed locations.
// * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
// access scopes are intended for fulfillment services.
// These scopes grant access to fulfillment orders assigned to locations that are being managed
// by fulfillment services.
// * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
// access scopes grant access to fulfillment orders
// assigned to locations managed by other fulfillment services.
//
// ### Fulfillment service app access scopes
//
// Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
// and don't have the `*_third_party_fulfillment_orders`
// or `*_merchant_managed_fulfillment_orders` access scopes.
// The app will only have access to the fulfillment orders assigned to their location
// (or multiple locations if the app registers multiple fulfillment services on the shop).
// The app will not have access to fulfillment orders assigned to merchant-managed locations
// or locations owned by other fulfillment service apps.
//
// ### Order management app access scopes
//
// **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
// `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
// on behalf of a merchant.
//
// If an app combines the functions of an order management app and a fulfillment service,
// then the app should request all
// access scopes to manage all assigned and all unassigned fulfillment orders.
//
// ## Notifications about fulfillment orders
//
// Fulfillment services are required to
// [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
// a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
// whenever a merchant submits a fulfillment or cancellation request.
//
// Both merchants and apps can
// [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
// to the
// [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
// to be notified whenever fulfillment order related domain events occur.
//
// [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
type GetFulfillmentOrderFulfillmentOrder struct {
	// A list of fulfillments for the fulfillment order.
	Fulfillments GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnection `json:"fulfillments"`
}

// GetFulfillments returns GetFulfillmentOrderFulfillmentOrder.Fulfillments, and is useful for accessing the field via an interface.
func (v *GetFulfillmentOrderFulfillmentOrder) GetFulfillments() GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnection {
	return v.Fulfillments
}

// GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnection includes the requested fields of the GraphQL type FulfillmentConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Fulfillments.
type GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnection struct {
	// A list of nodes that are contained in FulfillmentEdge. You can fetch data
	// about an individual node, or you can follow the edges to fetch data about a
	// collection of related nodes. At each node, you specify the fields that you
	// want to retrieve.
	Nodes []GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment `json:"nodes"`
}

// GetNodes returns GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnection) GetNodes() []GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment {
	return v.Nodes
}

// GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment includes the requested fields of the GraphQL type Fulfillment.
// The GraphQL type's documentation follows.
//
// Represents a fulfillment.
// In Shopify, a fulfillment represents a shipment of one or more items in an order.
// When an order has been completely fulfilled, it means that all the items that are included
// in the order have been sent to the customer.
// There can be more than one fulfillment for an order.
type GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment struct {
	// A globally-unique ID.
	Id string `json:"id"`
	// The status of the fulfillment.
	Status FulfillmentStatus `json:"status"`
}

// GetId returns GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment.Id, and is useful for accessing the field via an interface.
func (v *GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment) GetId() string {
	return v.Id
}

// GetStatus returns GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment.Status, and is useful for accessing the field via an interface.
func (v *GetFulfillmentOrderFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment) GetStatus() FulfillmentStatus {
	return v.Status
}

// GetFulfillmentOrderResponse is returned by GetFulfillmentOrder on success.
type GetFulfillmentOrderResponse struct {
	// Returns a `FulfillmentOrder` resource by ID.
	FulfillmentOrder GetFulfillmentOrderFulfillmentOrder `json:"fulfillmentOrder"`
}

// GetFulfillmentOrder returns GetFulfillmentOrderResponse.FulfillmentOrder, and is useful for accessing the field via an interface.
func (v *GetFulfillmentOrderResponse) GetFulfillmentOrder() GetFulfillmentOrderFulfillmentOrder {
	return v.FulfillmentOrder
}

// GetFulfillmentResponse is returned by GetFulfillment on success.
type GetFulfillmentResponse struct {
	// Returns a Fulfillment resource by ID.
	Fulfillment GetFulfillmentFulfillment `json:"fulfillment"`
}

// GetFulfillment returns GetFulfillmentResponse.Fulfillment, and is useful for accessing the field via an interface.
func (v *GetFulfillmentResponse) GetFulfillment() GetFulfillmentFulfillment { return v.Fulfillment }

// GetProductProduct includes the requested fields of the GraphQL type Product.
// The GraphQL type's documentation follows.
//
// The `Product` object lets you manage products in a merchant’s store.
//
// Products are the goods and services that merchants offer to customers. They can
// include various details such as title, description, price, images, and options
// such as size or color.
// You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant)
// to create or update different versions of the same product.
// You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
// Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
//
// Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
// including limitations and considerations.
type GetProductProduct struct {
	// A single-line description of the product,
	// with [HTML tags](https://developer.mozilla.org/en-US/docs/Web/HTML) removed.
	Description string `json:"description"`
	// A list of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant) associated with the product.
	// If querying a single product at the root, you can fetch up to 2000 variants.
	Variants GetProductProductVariantsProductVariantConnection `json:"variants"`
	// The minimum and maximum prices of a product, expressed in decimal numbers.
	// For example, if the product is priced between $10.00 and $50.00,
	// then the price range is $10.00 - $50.00.
	PriceRangeV2 GetProductProductPriceRangeV2 `json:"priceRangeV2"`
	// The [media](https://shopify.dev/docs/apps/build/online-store/product-media)
	// associated with the product. Valid media are images, 3D models, videos.
	Media GetProductProductMediaMediaConnection `json:"media"`
}

// GetDescription returns GetProductProduct.Description, and is useful for accessing the field via an interface.
func (v *GetProductProduct) GetDescription() string { return v.Description }

// GetVariants returns GetProductProduct.Variants, and is useful for accessing the field via an interface.
func (v *GetProductProduct) GetVariants() GetProductProductVariantsProductVariantConnection {
	return v.Variants
}

// GetPriceRangeV2 returns GetProductProduct.PriceRangeV2, and is useful for accessing the field via an interface.
func (v *GetProductProduct) GetPriceRangeV2() GetProductProductPriceRangeV2 { return v.PriceRangeV2 }

// GetMedia returns GetProductProduct.Media, and is useful for accessing the field via an interface.
func (v *GetProductProduct) GetMedia() GetProductProductMediaMediaConnection { return v.Media }

// GetProductProductMediaMediaConnection includes the requested fields of the GraphQL type MediaConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Media.
type GetProductProductMediaMediaConnection struct {
	// A list of nodes that are contained in MediaEdge. You can fetch data about an
	// individual node, or you can follow the edges to fetch data about a collection
	// of related nodes. At each node, you specify the fields that you want to retrieve.
	Nodes []GetProductProductMediaMediaConnectionNodesMedia `json:"-"`
}

// GetNodes returns GetProductProductMediaMediaConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnection) GetNodes() []GetProductProductMediaMediaConnectionNodesMedia {
	return v.Nodes
}

func (v *GetProductProductMediaMediaConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetProductProductMediaMediaConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetProductProductMediaMediaConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]GetProductProductMediaMediaConnectionNodesMedia,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalGetProductProductMediaMediaConnectionNodesMedia(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal GetProductProductMediaMediaConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalGetProductProductMediaMediaConnection struct {
	Nodes []json.RawMessage `json:"nodes"`
}

func (v *GetProductProductMediaMediaConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetProductProductMediaMediaConnection) __premarshalJSON() (*__premarshalGetProductProductMediaMediaConnection, error) {
	var retval __premarshalGetProductProductMediaMediaConnection

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalGetProductProductMediaMediaConnectionNodesMedia(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GetProductProductMediaMediaConnection.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// GetProductProductMediaMediaConnectionNodesExternalVideo includes the requested fields of the GraphQL type ExternalVideo.
// The GraphQL type's documentation follows.
//
// Represents a video hosted outside of Shopify.
type GetProductProductMediaMediaConnectionNodesExternalVideo struct {
	Typename string `json:"__typename"`
	// The preview image for the media.
	Preview GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage `json:"preview"`
}

// GetTypename returns GetProductProductMediaMediaConnectionNodesExternalVideo.Typename, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesExternalVideo) GetTypename() string {
	return v.Typename
}

// GetPreview returns GetProductProductMediaMediaConnectionNodesExternalVideo.Preview, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesExternalVideo) GetPreview() GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage {
	return v.Preview
}

// GetProductProductMediaMediaConnectionNodesMedia includes the requested fields of the GraphQL interface Media.
//
// GetProductProductMediaMediaConnectionNodesMedia is implemented by the following types:
// GetProductProductMediaMediaConnectionNodesExternalVideo
// GetProductProductMediaMediaConnectionNodesMediaImage
// GetProductProductMediaMediaConnectionNodesModel3d
// GetProductProductMediaMediaConnectionNodesVideo
// The GraphQL type's documentation follows.
//
// Represents a media interface.
type GetProductProductMediaMediaConnectionNodesMedia interface {
	implementsGraphQLInterfaceGetProductProductMediaMediaConnectionNodesMedia()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetPreview returns the interface-field "preview" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The preview image for the media.
	GetPreview() GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage
}

func (v *GetProductProductMediaMediaConnectionNodesExternalVideo) implementsGraphQLInterfaceGetProductProductMediaMediaConnectionNodesMedia() {
}
func (v *GetProductProductMediaMediaConnectionNodesMediaImage) implementsGraphQLInterfaceGetProductProductMediaMediaConnectionNodesMedia() {
}
func (v *GetProductProductMediaMediaConnectionNodesModel3d) implementsGraphQLInterfaceGetProductProductMediaMediaConnectionNodesMedia() {
}
func (v *GetProductProductMediaMediaConnectionNodesVideo) implementsGraphQLInterfaceGetProductProductMediaMediaConnectionNodesMedia() {
}

func __unmarshalGetProductProductMediaMediaConnectionNodesMedia(b []byte, v *GetProductProductMediaMediaConnectionNodesMedia) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ExternalVideo":
		*v = new(GetProductProductMediaMediaConnectionNodesExternalVideo)
		return json.Unmarshal(b, *v)
	case "MediaImage":
		*v = new(GetProductProductMediaMediaConnectionNodesMediaImage)
		return json.Unmarshal(b, *v)
	case "Model3d":
		*v = new(GetProductProductMediaMediaConnectionNodesModel3d)
		return json.Unmarshal(b, *v)
	case "Video":
		*v = new(GetProductProductMediaMediaConnectionNodesVideo)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Media.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetProductProductMediaMediaConnectionNodesMedia: "%v"`, tn.TypeName)
	}
}

func __marshalGetProductProductMediaMediaConnectionNodesMedia(v *GetProductProductMediaMediaConnectionNodesMedia) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetProductProductMediaMediaConnectionNodesExternalVideo:
		typename = "ExternalVideo"

		result := struct {
			TypeName string `json:"__typename"`
			*GetProductProductMediaMediaConnectionNodesExternalVideo
		}{typename, v}
		return json.Marshal(result)
	case *GetProductProductMediaMediaConnectionNodesMediaImage:
		typename = "MediaImage"

		result := struct {
			TypeName string `json:"__typename"`
			*GetProductProductMediaMediaConnectionNodesMediaImage
		}{typename, v}
		return json.Marshal(result)
	case *GetProductProductMediaMediaConnectionNodesModel3d:
		typename = "Model3d"

		result := struct {
			TypeName string `json:"__typename"`
			*GetProductProductMediaMediaConnectionNodesModel3d
		}{typename, v}
		return json.Marshal(result)
	case *GetProductProductMediaMediaConnectionNodesVideo:
		typename = "Video"

		result := struct {
			TypeName string `json:"__typename"`
			*GetProductProductMediaMediaConnectionNodesVideo
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetProductProductMediaMediaConnectionNodesMedia: "%T"`, v)
	}
}

// GetProductProductMediaMediaConnectionNodesMediaImage includes the requested fields of the GraphQL type MediaImage.
// The GraphQL type's documentation follows.
//
// The `MediaImage` object represents an image hosted on Shopify's
// [content delivery network (CDN)](https://shopify.dev/docs/storefronts/themes/best-practices/performance/platform#shopify-cdn).
// Shopify CDN is a content system that serves as the primary way to store,
// manage, and deliver visual content for products, variants, and other resources across the Shopify platform.
//
// The `MediaImage` object provides information to:
//
// - Store and display product and variant images across online stores, admin interfaces, and mobile apps.
// - Retrieve visual branding elements, including logos, banners, favicons, and background images in checkout flows.
// - Retrieve signed URLs for secure, time-limited access to original image files.
//
// Each `MediaImage` object provides both the processed image data (with automatic optimization and CDN delivery)
// and access to the original source file. The image processing is handled asynchronously, so images
// might not be immediately available after upload. The
// [`status`](https://shopify.dev/docs/api/admin-graphql/latest/objects/mediaimage#field-MediaImage.fields.status)
// field indicates when processing is complete and the image is ready for use.
//
// The `MediaImage` object implements the [`Media`](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/Media)
// interface alongside other media types, like videos and 3D models.
//
// Learn about
// managing media for [products](https://shopify.dev/docs/apps/build/online-store/product-media),
// [product variants](https://shopify.dev/docs/apps/build/online-store/product-variant-media), and
// [asynchronous media management](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components#asynchronous-media-management).
type GetProductProductMediaMediaConnectionNodesMediaImage struct {
	Typename string `json:"__typename"`
	// The preview image for the media.
	Preview GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage `json:"preview"`
}

// GetTypename returns GetProductProductMediaMediaConnectionNodesMediaImage.Typename, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesMediaImage) GetTypename() string {
	return v.Typename
}

// GetPreview returns GetProductProductMediaMediaConnectionNodesMediaImage.Preview, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesMediaImage) GetPreview() GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage {
	return v.Preview
}

// GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage includes the requested fields of the GraphQL type MediaPreviewImage.
// The GraphQL type's documentation follows.
//
// Represents the preview image for a media.
type GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage struct {
	// The preview image for the media. Returns `null` until `status` is `READY`.
	Image GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage `json:"image"`
}

// GetImage returns GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage.Image, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage) GetImage() GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage {
	return v.Image
}

// GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage includes the requested fields of the GraphQL type Image.
// The GraphQL type's documentation follows.
//
// Represents an image resource.
type GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage struct {
	// The location of the image as a URL.
	//
	// If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
	//
	// All transformation options are considered "best-effort". Any transformation
	// that the original image type doesn't support will be ignored.
	//
	// If you need multiple variations of the same image, then you can use [GraphQL
	// aliases](https://graphql.org/learn/queries/#aliases).
	Url string `json:"url"`
}

// GetUrl returns GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage.Url, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage) GetUrl() string {
	return v.Url
}

// GetProductProductMediaMediaConnectionNodesModel3d includes the requested fields of the GraphQL type Model3d.
// The GraphQL type's documentation follows.
//
// Represents a Shopify hosted 3D model.
type GetProductProductMediaMediaConnectionNodesModel3d struct {
	Typename string `json:"__typename"`
	// The preview image for the media.
	Preview GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage `json:"preview"`
}

// GetTypename returns GetProductProductMediaMediaConnectionNodesModel3d.Typename, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesModel3d) GetTypename() string { return v.Typename }

// GetPreview returns GetProductProductMediaMediaConnectionNodesModel3d.Preview, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesModel3d) GetPreview() GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage {
	return v.Preview
}

// GetProductProductMediaMediaConnectionNodesVideo includes the requested fields of the GraphQL type Video.
// The GraphQL type's documentation follows.
//
// Represents a Shopify hosted video.
type GetProductProductMediaMediaConnectionNodesVideo struct {
	Typename string `json:"__typename"`
	// The preview image for the media.
	Preview GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage `json:"preview"`
}

// GetTypename returns GetProductProductMediaMediaConnectionNodesVideo.Typename, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesVideo) GetTypename() string { return v.Typename }

// GetPreview returns GetProductProductMediaMediaConnectionNodesVideo.Preview, and is useful for accessing the field via an interface.
func (v *GetProductProductMediaMediaConnectionNodesVideo) GetPreview() GetProductProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage {
	return v.Preview
}

// GetProductProductPriceRangeV2 includes the requested fields of the GraphQL type ProductPriceRangeV2.
// The GraphQL type's documentation follows.
//
// The price range of the product.
type GetProductProductPriceRangeV2 struct {
	// The lowest variant's price.
	MinVariantPrice GetProductProductPriceRangeV2MinVariantPriceMoneyV2 `json:"minVariantPrice"`
	// The highest variant's price.
	MaxVariantPrice GetProductProductPriceRangeV2MaxVariantPriceMoneyV2 `json:"maxVariantPrice"`
}

// GetMinVariantPrice returns GetProductProductPriceRangeV2.MinVariantPrice, and is useful for accessing the field via an interface.
func (v *GetProductProductPriceRangeV2) GetMinVariantPrice() GetProductProductPriceRangeV2MinVariantPriceMoneyV2 {
	return v.MinVariantPrice
}

// GetMaxVariantPrice returns GetProductProductPriceRangeV2.MaxVariantPrice, and is useful for accessing the field via an interface.
func (v *GetProductProductPriceRangeV2) GetMaxVariantPrice() GetProductProductPriceRangeV2MaxVariantPriceMoneyV2 {
	return v.MaxVariantPrice
}

// GetProductProductPriceRangeV2MaxVariantPriceMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type GetProductProductPriceRangeV2MaxVariantPriceMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
}

// GetAmount returns GetProductProductPriceRangeV2MaxVariantPriceMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *GetProductProductPriceRangeV2MaxVariantPriceMoneyV2) GetAmount() string { return v.Amount }

// GetProductProductPriceRangeV2MinVariantPriceMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type GetProductProductPriceRangeV2MinVariantPriceMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
}

// GetAmount returns GetProductProductPriceRangeV2MinVariantPriceMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *GetProductProductPriceRangeV2MinVariantPriceMoneyV2) GetAmount() string { return v.Amount }

// GetProductProductVariantsProductVariantConnection includes the requested fields of the GraphQL type ProductVariantConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple ProductVariants.
type GetProductProductVariantsProductVariantConnection struct {
	// A list of nodes that are contained in ProductVariantEdge. You can fetch data
	// about an individual node, or you can follow the edges to fetch data about a
	// collection of related nodes. At each node, you specify the fields that you
	// want to retrieve.
	Nodes []GetProductProductVariantsProductVariantConnectionNodesProductVariant `json:"nodes"`
}

// GetNodes returns GetProductProductVariantsProductVariantConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetProductProductVariantsProductVariantConnection) GetNodes() []GetProductProductVariantsProductVariantConnectionNodesProductVariant {
	return v.Nodes
}

// GetProductProductVariantsProductVariantConnectionNodesProductVariant includes the requested fields of the GraphQL type ProductVariant.
// The GraphQL type's documentation follows.
//
// The `ProductVariant` object represents a version of a
// [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
// that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
// such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
// blue t-shirt would be one product variant and a large, blue t-shirt would be another.
//
// Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
// use cases for using the `ProductVariant` object include:
//
// - Tracking inventory for each variant
// - Setting unique prices for each variant
// - Assigning barcodes and SKUs to connect variants to fulfillment services
// - Attaching variant-specific images and media
// - Setting delivery and tax requirements
// - Supporting product bundles, subscriptions, and selling plans
//
// A `ProductVariant` is associated with a parent
// [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
// `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
// pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
// can reference other GraphQL types such as:
//
// - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
// - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
// - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
//
// Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
type GetProductProductVariantsProductVariantConnectionNodesProductVariant struct {
	// A globally-unique ID.
	Id string `json:"id"`
	// The title of the product variant.
	Title string `json:"title"`
	// A case-sensitive identifier for the product variant in the shop.
	// Required in order to connect to a fulfillment service.
	Sku string `json:"sku"`
	// The price of the product variant in the default shop currency.
	Price string `json:"price"`
	// The featured image for the variant.
	Image GetProductProductVariantsProductVariantConnectionNodesProductVariantImage `json:"image"`
}

// GetId returns GetProductProductVariantsProductVariantConnectionNodesProductVariant.Id, and is useful for accessing the field via an interface.
func (v *GetProductProductVariantsProductVariantConnectionNodesProductVariant) GetId() string {
	return v.Id
}

// GetTitle returns GetProductProductVariantsProductVariantConnectionNodesProductVariant.Title, and is useful for accessing the field via an interface.
func (v *GetProductProductVariantsProductVariantConnectionNodesProductVariant) GetTitle() string {
	return v.Title
}

// GetSku returns GetProductProductVariantsProductVariantConnectionNodesProductVariant.Sku, and is useful for accessing the field via an interface.
func (v *GetProductProductVariantsProductVariantConnectionNodesProductVariant) GetSku() string {
	return v.Sku
}

// GetPrice returns GetProductProductVariantsProductVariantConnectionNodesProductVariant.Price, and is useful for accessing the field via an interface.
func (v *GetProductProductVariantsProductVariantConnectionNodesProductVariant) GetPrice() string {
	return v.Price
}

// GetImage returns GetProductProductVariantsProductVariantConnectionNodesProductVariant.Image, and is useful for accessing the field via an interface.
func (v *GetProductProductVariantsProductVariantConnectionNodesProductVariant) GetImage() GetProductProductVariantsProductVariantConnectionNodesProductVariantImage {
	return v.Image
}

// GetProductProductVariantsProductVariantConnectionNodesProductVariantImage includes the requested fields of the GraphQL type Image.
// The GraphQL type's documentation follows.
//
// Represents an image resource.
type GetProductProductVariantsProductVariantConnectionNodesProductVariantImage struct {
	// The location of the image as a URL.
	//
	// If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
	//
	// All transformation options are considered "best-effort". Any transformation
	// that the original image type doesn't support will be ignored.
	//
	// If you need multiple variations of the same image, then you can use [GraphQL
	// aliases](https://graphql.org/learn/queries/#aliases).
	Url string `json:"url"`
}

// GetUrl returns GetProductProductVariantsProductVariantConnectionNodesProductVariantImage.Url, and is useful for accessing the field via an interface.
func (v *GetProductProductVariantsProductVariantConnectionNodesProductVariantImage) GetUrl() string {
	return v.Url
}

// GetProductResponse is returned by GetProduct on success.
type GetProductResponse struct {
	// Retrieves a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) by its ID.
	// A product is an item that a merchant can sell in their store.
	//
	// Use the `product` query when you need to:
	//
	// - Access essential product data (for example, title, description, price, images, SEO metadata, and metafields).
	// - Build product detail pages and manage inventory.
	// - Handle international sales with localized pricing and content.
	// - Manage product variants and product options.
	//
	// Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
	Product GetProductProduct `json:"product"`
}

// GetProduct returns GetProductResponse.Product, and is useful for accessing the field via an interface.
func (v *GetProductResponse) GetProduct() GetProductProduct { return v.Product }

// GetProductsSelfServiceProductsProductConnection includes the requested fields of the GraphQL type ProductConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Products.
type GetProductsSelfServiceProductsProductConnection struct {
	// The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node.
	Edges []GetProductsSelfServiceProductsProductConnectionEdgesProductEdge `json:"edges"`
}

// GetEdges returns GetProductsSelfServiceProductsProductConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnection) GetEdges() []GetProductsSelfServiceProductsProductConnectionEdgesProductEdge {
	return v.Edges
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdge includes the requested fields of the GraphQL type ProductEdge.
// The GraphQL type's documentation follows.
//
// An auto-generated type which holds one Product and a cursor during pagination.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdge struct {
	// The item at the end of ProductEdge.
	Node GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct `json:"node"`
}

// GetNode returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdge.Node, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdge) GetNode() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct {
	return v.Node
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct includes the requested fields of the GraphQL type Product.
// The GraphQL type's documentation follows.
//
// The `Product` object lets you manage products in a merchant’s store.
//
// Products are the goods and services that merchants offer to customers. They can
// include various details such as title, description, price, images, and options
// such as size or color.
// You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant)
// to create or update different versions of the same product.
// You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
// Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
//
// Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
// including limitations and considerations.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct struct {
	// A globally-unique ID.
	Id string `json:"id"`
	// A single-line description of the product,
	// with [HTML tags](https://developer.mozilla.org/en-US/docs/Web/HTML) removed.
	Description string `json:"description"`
	// The name for the product that displays to customers. The title is used to construct the product's handle.
	// For example, if a product is titled "Black Sunglasses", then the handle is `black-sunglasses`.
	Title string `json:"title"`
	// The minimum and maximum prices of a product, expressed in decimal numbers.
	// For example, if the product is priced between $10.00 and $50.00,
	// then the price range is $10.00 - $50.00.
	PriceRangeV2 GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2 `json:"priceRangeV2"`
	// The [media](https://shopify.dev/docs/apps/build/online-store/product-media)
	// associated with the product. Valid media are images, 3D models, videos.
	Media GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection `json:"media"`
}

// GetId returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct.Id, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct) GetId() string {
	return v.Id
}

// GetDescription returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct.Description, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct) GetDescription() string {
	return v.Description
}

// GetTitle returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct.Title, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct) GetTitle() string {
	return v.Title
}

// GetPriceRangeV2 returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct.PriceRangeV2, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct) GetPriceRangeV2() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2 {
	return v.PriceRangeV2
}

// GetMedia returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct.Media, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProduct) GetMedia() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection {
	return v.Media
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection includes the requested fields of the GraphQL type MediaConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Media.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection struct {
	// A list of nodes that are contained in MediaEdge. You can fetch data about an
	// individual node, or you can follow the edges to fetch data about a collection
	// of related nodes. At each node, you specify the fields that you want to retrieve.
	Nodes []GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia `json:"-"`
}

// GetNodes returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection) GetNodes() []GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia {
	return v.Nodes
}

func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection struct {
	Nodes []json.RawMessage `json:"nodes"`
}

func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection) __premarshalJSON() (*__premarshalGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection, error) {
	var retval __premarshalGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnection.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo includes the requested fields of the GraphQL type ExternalVideo.
// The GraphQL type's documentation follows.
//
// Represents a video hosted outside of Shopify.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo struct {
	Typename string `json:"__typename"`
	// The preview image for the media.
	Preview GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage `json:"preview"`
}

// GetTypename returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo.Typename, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo) GetTypename() string {
	return v.Typename
}

// GetPreview returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo.Preview, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo) GetPreview() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage {
	return v.Preview
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia includes the requested fields of the GraphQL interface Media.
//
// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia is implemented by the following types:
// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo
// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage
// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d
// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo
// The GraphQL type's documentation follows.
//
// Represents a media interface.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia interface {
	implementsGraphQLInterfaceGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetPreview returns the interface-field "preview" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The preview image for the media.
	GetPreview() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage
}

func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo) implementsGraphQLInterfaceGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia() {
}
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage) implementsGraphQLInterfaceGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia() {
}
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d) implementsGraphQLInterfaceGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia() {
}
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo) implementsGraphQLInterfaceGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia() {
}

func __unmarshalGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia(b []byte, v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ExternalVideo":
		*v = new(GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo)
		return json.Unmarshal(b, *v)
	case "MediaImage":
		*v = new(GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage)
		return json.Unmarshal(b, *v)
	case "Model3d":
		*v = new(GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d)
		return json.Unmarshal(b, *v)
	case "Video":
		*v = new(GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Media.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia: "%v"`, tn.TypeName)
	}
}

func __marshalGetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia(v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo:
		typename = "ExternalVideo"

		result := struct {
			TypeName string `json:"__typename"`
			*GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesExternalVideo
		}{typename, v}
		return json.Marshal(result)
	case *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage:
		typename = "MediaImage"

		result := struct {
			TypeName string `json:"__typename"`
			*GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage
		}{typename, v}
		return json.Marshal(result)
	case *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d:
		typename = "Model3d"

		result := struct {
			TypeName string `json:"__typename"`
			*GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d
		}{typename, v}
		return json.Marshal(result)
	case *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo:
		typename = "Video"

		result := struct {
			TypeName string `json:"__typename"`
			*GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMedia: "%T"`, v)
	}
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage includes the requested fields of the GraphQL type MediaImage.
// The GraphQL type's documentation follows.
//
// The `MediaImage` object represents an image hosted on Shopify's
// [content delivery network (CDN)](https://shopify.dev/docs/storefronts/themes/best-practices/performance/platform#shopify-cdn).
// Shopify CDN is a content system that serves as the primary way to store,
// manage, and deliver visual content for products, variants, and other resources across the Shopify platform.
//
// The `MediaImage` object provides information to:
//
// - Store and display product and variant images across online stores, admin interfaces, and mobile apps.
// - Retrieve visual branding elements, including logos, banners, favicons, and background images in checkout flows.
// - Retrieve signed URLs for secure, time-limited access to original image files.
//
// Each `MediaImage` object provides both the processed image data (with automatic optimization and CDN delivery)
// and access to the original source file. The image processing is handled asynchronously, so images
// might not be immediately available after upload. The
// [`status`](https://shopify.dev/docs/api/admin-graphql/latest/objects/mediaimage#field-MediaImage.fields.status)
// field indicates when processing is complete and the image is ready for use.
//
// The `MediaImage` object implements the [`Media`](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/Media)
// interface alongside other media types, like videos and 3D models.
//
// Learn about
// managing media for [products](https://shopify.dev/docs/apps/build/online-store/product-media),
// [product variants](https://shopify.dev/docs/apps/build/online-store/product-variant-media), and
// [asynchronous media management](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components#asynchronous-media-management).
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage struct {
	Typename string `json:"__typename"`
	// The preview image for the media.
	Preview GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage `json:"preview"`
}

// GetTypename returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage.Typename, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage) GetTypename() string {
	return v.Typename
}

// GetPreview returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage.Preview, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaImage) GetPreview() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage {
	return v.Preview
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage includes the requested fields of the GraphQL type MediaPreviewImage.
// The GraphQL type's documentation follows.
//
// Represents the preview image for a media.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage struct {
	// The preview image for the media. Returns `null` until `status` is `READY`.
	Image GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage `json:"image"`
}

// GetImage returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage.Image, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage) GetImage() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage {
	return v.Image
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage includes the requested fields of the GraphQL type Image.
// The GraphQL type's documentation follows.
//
// Represents an image resource.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage struct {
	// The location of the image as a URL.
	//
	// If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
	//
	// All transformation options are considered "best-effort". Any transformation
	// that the original image type doesn't support will be ignored.
	//
	// If you need multiple variations of the same image, then you can use [GraphQL
	// aliases](https://graphql.org/learn/queries/#aliases).
	Url string `json:"url"`
}

// GetUrl returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage.Url, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImageImage) GetUrl() string {
	return v.Url
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d includes the requested fields of the GraphQL type Model3d.
// The GraphQL type's documentation follows.
//
// Represents a Shopify hosted 3D model.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d struct {
	Typename string `json:"__typename"`
	// The preview image for the media.
	Preview GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage `json:"preview"`
}

// GetTypename returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d.Typename, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d) GetTypename() string {
	return v.Typename
}

// GetPreview returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d.Preview, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesModel3d) GetPreview() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage {
	return v.Preview
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo includes the requested fields of the GraphQL type Video.
// The GraphQL type's documentation follows.
//
// Represents a Shopify hosted video.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo struct {
	Typename string `json:"__typename"`
	// The preview image for the media.
	Preview GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage `json:"preview"`
}

// GetTypename returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo.Typename, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo) GetTypename() string {
	return v.Typename
}

// GetPreview returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo.Preview, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesVideo) GetPreview() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductMediaMediaConnectionNodesMediaPreviewMediaPreviewImage {
	return v.Preview
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2 includes the requested fields of the GraphQL type ProductPriceRangeV2.
// The GraphQL type's documentation follows.
//
// The price range of the product.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2 struct {
	// The lowest variant's price.
	MinVariantPrice GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MinVariantPriceMoneyV2 `json:"minVariantPrice"`
	// The highest variant's price.
	MaxVariantPrice GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MaxVariantPriceMoneyV2 `json:"maxVariantPrice"`
}

// GetMinVariantPrice returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2.MinVariantPrice, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2) GetMinVariantPrice() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MinVariantPriceMoneyV2 {
	return v.MinVariantPrice
}

// GetMaxVariantPrice returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2.MaxVariantPrice, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2) GetMaxVariantPrice() GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MaxVariantPriceMoneyV2 {
	return v.MaxVariantPrice
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MaxVariantPriceMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MaxVariantPriceMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
}

// GetAmount returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MaxVariantPriceMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MaxVariantPriceMoneyV2) GetAmount() string {
	return v.Amount
}

// GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MinVariantPriceMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MinVariantPriceMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
}

// GetAmount returns GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MinVariantPriceMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceProductsProductConnectionEdgesProductEdgeNodeProductPriceRangeV2MinVariantPriceMoneyV2) GetAmount() string {
	return v.Amount
}

// GetProductsSelfServiceResponse is returned by GetProductsSelfService on success.
type GetProductsSelfServiceResponse struct {
	// Retrieves a list of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
	// in a store. Products are the items that merchants can sell in their store.
	//
	// Use the `products` query when you need to:
	//
	// - Build a browsing interface for a product catalog.
	// - Create product
	// [searching](https://shopify.dev/docs/api/usage/search-syntax), [sorting](https://shopify.dev/docs/api/admin-graphql/latest/queries/products#arguments-sortKey), and [filtering](https://shopify.dev/docs/api/admin-graphql/latest/queries/products#arguments-query) experiences.
	// - Implement product recommendations.
	// - Sync product data with external systems.
	//
	// The `products` query supports [pagination](https://shopify.dev/docs/api/usage/pagination-graphql)
	// to handle large product catalogs and [saved searches](https://shopify.dev/docs/api/admin-graphql/latest/queries/products#arguments-savedSearchId)
	// for frequently used product queries.
	//
	// The `products` query returns products with their associated metadata, including:
	//
	// - Basic product information (for example, title, description, vendor, and type)
	// - Product options and product variants, with their prices and inventory
	// - Media attachments (for example, images and videos)
	// - SEO metadata
	// - Product categories and tags
	// - Product availability and publishing statuses
	//
	// Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
	Products GetProductsSelfServiceProductsProductConnection `json:"products"`
}

// GetProducts returns GetProductsSelfServiceResponse.Products, and is useful for accessing the field via an interface.
func (v *GetProductsSelfServiceResponse) GetProducts() GetProductsSelfServiceProductsProductConnection {
	return v.Products
}

// The input fields to create or update a mailing address.
type MailingAddressInput struct {
	// The first line of the address. Typically the street address or PO Box number.
	Address1 string `json:"address1"`
	// The second line of the address. Typically the number of the apartment, suite, or unit.
	Address2 string `json:"address2"`
	// The name of the city, district, village, or town.
	City string `json:"city"`
	// The name of the customer's company or organization.
	Company string `json:"company"`
	// The two-letter code for the country of the address.
	CountryCode CountryCode `json:"countryCode"`
	// The first name of the customer.
	FirstName string `json:"firstName"`
	// The last name of the customer.
	LastName string `json:"lastName"`
	// A unique phone number for the customer.
	//
	// Formatted using E.164 standard. For example, _+16135551111_.
	Phone string `json:"phone"`
	// The code for the region of the address, such as the province, state, or district.
	// For example QC for Quebec, Canada.
	ProvinceCode string `json:"provinceCode"`
	// The zip or postal code of the address.
	Zip string `json:"zip"`
}

// GetAddress1 returns MailingAddressInput.Address1, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetAddress1() string { return v.Address1 }

// GetAddress2 returns MailingAddressInput.Address2, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetAddress2() string { return v.Address2 }

// GetCity returns MailingAddressInput.City, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetCity() string { return v.City }

// GetCompany returns MailingAddressInput.Company, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetCompany() string { return v.Company }

// GetCountryCode returns MailingAddressInput.CountryCode, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetCountryCode() CountryCode { return v.CountryCode }

// GetFirstName returns MailingAddressInput.FirstName, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetFirstName() string { return v.FirstName }

// GetLastName returns MailingAddressInput.LastName, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetLastName() string { return v.LastName }

// GetPhone returns MailingAddressInput.Phone, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetPhone() string { return v.Phone }

// GetProvinceCode returns MailingAddressInput.ProvinceCode, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetProvinceCode() string { return v.ProvinceCode }

// GetZip returns MailingAddressInput.Zip, and is useful for accessing the field via an interface.
func (v *MailingAddressInput) GetZip() string { return v.Zip }

// The input fields to use to create or update a metafield through a mutation on the owning resource.
// An alternative way to create or update a metafield is by using the
// [metafieldsSet](https://shopify.dev/api/admin-graphql/latest/mutations/metafieldsSet) mutation.
type MetafieldInput struct {
	// The unique ID of the metafield. Using `owner_id`, `namespace`, and `key` is preferred for creating and updating.
	Id string `json:"id"`
	// The container for a group of metafields that the metafield is or will be associated with. Used in tandem with
	// `key` to lookup a metafield on a resource, preventing conflicts with other metafields with the same `key`.
	//
	// Required when creating a metafield, but optional when updating. Used to help identify the metafield when
	// updating, but can't be updated itself.
	//
	// Must be 3-255 characters long and can contain alphanumeric, hyphen, and underscore characters.
	Namespace string `json:"namespace"`
	// The unique identifier for a metafield within its namespace.
	//
	// Required when creating a metafield, but optional when updating. Used to help identify the metafield when
	// updating, but can't be updated itself.
	//
	// Must be 2-64 characters long and can contain alphanumeric, hyphen, and underscore characters.
	Key string `json:"key"`
	// The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
	Value string `json:"value"`
	// The type of data that is stored in the metafield.
	// Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
	//
	// Required when creating or updating a metafield without a definition.
	Type string `json:"type"`
}

// GetId returns MetafieldInput.Id, and is useful for accessing the field via an interface.
func (v *MetafieldInput) GetId() string { return v.Id }

// GetNamespace returns MetafieldInput.Namespace, and is useful for accessing the field via an interface.
func (v *MetafieldInput) GetNamespace() string { return v.Namespace }

// GetKey returns MetafieldInput.Key, and is useful for accessing the field via an interface.
func (v *MetafieldInput) GetKey() string { return v.Key }

// GetValue returns MetafieldInput.Value, and is useful for accessing the field via an interface.
func (v *MetafieldInput) GetValue() string { return v.Value }

// GetType returns MetafieldInput.Type, and is useful for accessing the field via an interface.
func (v *MetafieldInput) GetType() string { return v.Type }

// OrderDetailByIdOrder includes the requested fields of the GraphQL type Order.
// The GraphQL type's documentation follows.
//
// The `Order` object represents a customer's request to purchase one or more
// products from a store. Use the `Order` object to handle the complete purchase
// lifecycle from checkout to fulfillment.
//
// Use the `Order` object when you need to:
//
// - Display order details on customer account pages or admin dashboards.
// - Create orders for phone sales, wholesale customers, or subscription services.
// - Update order information like shipping addresses, notes, or fulfillment status.
// - Process returns, exchanges, and partial refunds.
// - Generate invoices, receipts, and shipping labels.
//
// The `Order` object serves as the central hub connecting customer information,
// product details, payment processing, and fulfillment data within the GraphQL
// Admin API schema.
//
// > Note:
// > Only the last 60 days' worth of orders from a store are accessible from the
// `Order` object by default. If you want to access older records,
// > then you need to [request access to all
// orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If
// your app is granted
// > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
//
// > Caution:
// > Only use orders data if it's required for your app's functionality. Shopify
// will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions)
// for apps that don't have a legitimate use for the associated data.
//
// Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
type OrderDetailByIdOrder struct {
	// A globally-unique ID.
	Id string `json:"id"`
	// The email address associated with the customer for this order.
	// Used for sending order confirmations, shipping notifications, and other order-related communications.
	// Returns `null` if no email address was provided during checkout.
	Email string `json:"email"`
	// The unique identifier for the order that appears on the order page in the Shopify admin and the **Order status** page.
	// For example, "#1001", "EN1001", or "1001-A".
	// This value isn't unique across multiple stores. Use this field to identify
	// orders in the Shopify admin and for order tracking.
	Name string `json:"name"`
	// The note associated with the order.
	// Contains additional information or instructions added by merchants or customers during the order process.
	// Commonly used for special delivery instructions, gift messages, or internal processing notes.
	Note string `json:"note"`
	// The phone number associated with the customer for this order.
	// Useful for contacting customers about shipping updates, delivery notifications, or order issues.
	// Returns `null` if no phone number was provided during checkout.
	Phone string `json:"phone"`
	// A summary of all shipping costs on the order.
	// Aggregates shipping charges, discounts, and taxes to provide a single view of delivery costs.
	ShippingLine OrderDetailByIdOrderShippingLine `json:"shippingLine"`
	// A list of transactions associated with the order.
	Transactions []OrderDetailByIdOrderTransactionsOrderTransaction `json:"transactions"`
	// The total price of the order, before returns, in shop and presentment currencies.
	// This includes taxes and discounts.
	TotalPriceSet OrderDetailByIdOrderTotalPriceSetMoneyBag `json:"totalPriceSet"`
	// The total price of the order, after returns, in shop and presentment currencies.
	// This includes taxes and discounts.
	CurrentTotalPriceSet OrderDetailByIdOrderCurrentTotalPriceSetMoneyBag `json:"currentTotalPriceSet"`
	// A list of [fulfillment orders](https://shopify.dev/docs/api/admin-graphql/latest/objects/FulfillmentOrder) for an order.
	// Each fulfillment order groups [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order#field-Order.fields.lineItems)
	// that are fulfilled together,
	// allowing an order to be processed in parts if needed.
	FulfillmentOrders OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnection `json:"fulfillmentOrders"`
	// A list of additional information that has been attached to the order. For
	// example, gift message, delivery instructions, or internal notes.
	CustomAttributes []OrderDetailByIdOrderCustomAttributesAttribute `json:"customAttributes"`
}

// GetId returns OrderDetailByIdOrder.Id, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetId() string { return v.Id }

// GetEmail returns OrderDetailByIdOrder.Email, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetEmail() string { return v.Email }

// GetName returns OrderDetailByIdOrder.Name, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetName() string { return v.Name }

// GetNote returns OrderDetailByIdOrder.Note, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetNote() string { return v.Note }

// GetPhone returns OrderDetailByIdOrder.Phone, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetPhone() string { return v.Phone }

// GetShippingLine returns OrderDetailByIdOrder.ShippingLine, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetShippingLine() OrderDetailByIdOrderShippingLine {
	return v.ShippingLine
}

// GetTransactions returns OrderDetailByIdOrder.Transactions, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetTransactions() []OrderDetailByIdOrderTransactionsOrderTransaction {
	return v.Transactions
}

// GetTotalPriceSet returns OrderDetailByIdOrder.TotalPriceSet, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetTotalPriceSet() OrderDetailByIdOrderTotalPriceSetMoneyBag {
	return v.TotalPriceSet
}

// GetCurrentTotalPriceSet returns OrderDetailByIdOrder.CurrentTotalPriceSet, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetCurrentTotalPriceSet() OrderDetailByIdOrderCurrentTotalPriceSetMoneyBag {
	return v.CurrentTotalPriceSet
}

// GetFulfillmentOrders returns OrderDetailByIdOrder.FulfillmentOrders, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetFulfillmentOrders() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnection {
	return v.FulfillmentOrders
}

// GetCustomAttributes returns OrderDetailByIdOrder.CustomAttributes, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrder) GetCustomAttributes() []OrderDetailByIdOrderCustomAttributesAttribute {
	return v.CustomAttributes
}

// OrderDetailByIdOrderCurrentTotalPriceSetMoneyBag includes the requested fields of the GraphQL type MoneyBag.
// The GraphQL type's documentation follows.
//
// A collection of monetary values in their respective currencies. Typically used
// in the context of multi-currency pricing and transactions,
// when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
type OrderDetailByIdOrderCurrentTotalPriceSetMoneyBag struct {
	// Amount in presentment currency.
	PresentmentMoney OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagPresentmentMoneyMoneyV2 `json:"presentmentMoney"`
	// Amount in shop currency.
	ShopMoney OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagShopMoneyMoneyV2 `json:"shopMoney"`
}

// GetPresentmentMoney returns OrderDetailByIdOrderCurrentTotalPriceSetMoneyBag.PresentmentMoney, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderCurrentTotalPriceSetMoneyBag) GetPresentmentMoney() OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagPresentmentMoneyMoneyV2 {
	return v.PresentmentMoney
}

// GetShopMoney returns OrderDetailByIdOrderCurrentTotalPriceSetMoneyBag.ShopMoney, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderCurrentTotalPriceSetMoneyBag) GetShopMoney() OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagShopMoneyMoneyV2 {
	return v.ShopMoney
}

// OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagPresentmentMoneyMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagPresentmentMoneyMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
	// The three-letter currency code that represents a world currency used in a store. Currency codes
	// include standard [standard ISO 4217 codes](https://en.wikipedia.org/wiki/ISO_4217), legacy codes,
	// and non-standard codes. For example, USD.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

// GetAmount returns OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagPresentmentMoneyMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagPresentmentMoneyMoneyV2) GetAmount() string {
	return v.Amount
}

// GetCurrencyCode returns OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagPresentmentMoneyMoneyV2.CurrencyCode, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagPresentmentMoneyMoneyV2) GetCurrencyCode() CurrencyCode {
	return v.CurrencyCode
}

// OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagShopMoneyMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagShopMoneyMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
	// The three-letter currency code that represents a world currency used in a store. Currency codes
	// include standard [standard ISO 4217 codes](https://en.wikipedia.org/wiki/ISO_4217), legacy codes,
	// and non-standard codes. For example, USD.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

// GetAmount returns OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagShopMoneyMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagShopMoneyMoneyV2) GetAmount() string {
	return v.Amount
}

// GetCurrencyCode returns OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagShopMoneyMoneyV2.CurrencyCode, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderCurrentTotalPriceSetMoneyBagShopMoneyMoneyV2) GetCurrencyCode() CurrencyCode {
	return v.CurrencyCode
}

// OrderDetailByIdOrderCustomAttributesAttribute includes the requested fields of the GraphQL type Attribute.
// The GraphQL type's documentation follows.
//
// A custom property. Attributes are used to store additional information about a Shopify resource, such as
// products, customers, or orders. Attributes are stored as key-value pairs.
//
// For example, a list of attributes might include whether a customer is a first-time buyer (`"customer_first_order": "true"`),
// whether an order is gift-wrapped (`"gift_wrapped": "true"`), a preferred delivery date
// (`"preferred_delivery_date": "2025-10-01"`), the discount applied (`"loyalty_discount_applied": "10%"`), and any
// notes provided by the customer (`"customer_notes": "Please leave at the front door"`).
type OrderDetailByIdOrderCustomAttributesAttribute struct {
	// The key or name of the attribute. For example, `"customer_first_order"`.
	Key string `json:"key"`
	// The value of the attribute. For example, `"true"`.
	Value string `json:"value"`
}

// GetKey returns OrderDetailByIdOrderCustomAttributesAttribute.Key, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderCustomAttributesAttribute) GetKey() string { return v.Key }

// GetValue returns OrderDetailByIdOrderCustomAttributesAttribute.Value, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderCustomAttributesAttribute) GetValue() string { return v.Value }

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnection includes the requested fields of the GraphQL type FulfillmentOrderConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple FulfillmentOrders.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnection struct {
	// A list of nodes that are contained in FulfillmentOrderEdge. You can fetch data
	// about an individual node, or you can follow the edges to fetch data about a
	// collection of related nodes. At each node, you specify the fields that you
	// want to retrieve.
	Nodes []OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder `json:"nodes"`
}

// GetNodes returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnection.Nodes, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnection) GetNodes() []OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder {
	return v.Nodes
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder includes the requested fields of the GraphQL type FulfillmentOrder.
// The GraphQL type's documentation follows.
//
// The FulfillmentOrder object represents either an item or a group of items in an
// [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
// that are expected to be fulfilled from the same location.
// There can be more than one fulfillment order for an
// [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
// at a given location.
//
// {{ '/api/reference/fulfillment_order_relationships.png' | image }}
//
// Fulfillment orders represent the work which is intended to be done in relation to an order.
// When fulfillment has started for one or more line items, a
// [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
// is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
//
// [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
//
// > Note:
// > Shopify creates fulfillment orders automatically when an order is created.
// > It is not possible to manually create fulfillment orders.
// >
// > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
//
// ## Retrieving fulfillment orders
//
// ### Fulfillment orders from an order
//
// All fulfillment orders related to a given order can be retrieved with the
// [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
// connection.
//
// [API access scopes](#api-access-scopes)
// govern which fulfillments orders are returned to clients.
// An API client will only receive a subset of the fulfillment orders which belong to an order
// if they don't have the necessary access scopes to view all of the fulfillment orders.
//
// ### Fulfillment orders assigned to the app for fulfillment
//
// Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
// [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
// connection.
// Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
// should be returned or only those where a merchant has sent a
// [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
// and it has yet to be responded to.
//
// The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
// the assigned fulfillment orders.
//
// ### All fulfillment orders
//
// Apps can retrieve all fulfillment orders with the
// [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
// query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
// which are accessible to the app according to the
// [fulfillment order access scopes](#api-access-scopes) it was granted with.
//
// ## The lifecycle of a fulfillment order
//
// ### Fulfillment Order Creation
//
// After an order is created, a background worker performs the order routing process which determines
// which locations will be responsible for fulfilling the purchased items.
// Once the order routing process is complete, one or more fulfillment orders will be created
// and assigned to these locations. It is not possible to manually create fulfillment orders.
//
// Once a fulfillment order has been created, it will have one of two different lifecycles depending on
// the type of location which the fulfillment order is assigned to.
//
// ### The lifecycle of a fulfillment order at a merchant managed location
//
// Fulfillment orders are completed by creating
// [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
// Fulfillments represents the work done.
//
// For digital products a merchant or an order management app would create a fulfilment once the digital asset
// has been provisioned.
// For example, in the case of a digital gift card, a merchant would to do this once
// the gift card has been activated - before the email has been shipped.
//
// On the other hand, for a traditional shipped order,
// a merchant or an order management app would create a fulfillment after picking and packing the items relating
// to a fulfillment order, but before the courier has collected the goods.
//
// [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
//
// ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
//
// For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
// a merchant or an Order Management App can
// [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
// to the fulfillment service which operates the location to request that they fulfill the associated items.
// A fulfillment service has the option to
// [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
// or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
// this fulfillment request.
//
// Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
// or order management app and instead a
// [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
// to the fulfillment service.
//
// Once a fulfillment service accepts a fulfillment request,
// then after they are ready to pack items and send them for delivery, they create fulfillments with the
// [fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
// mutation.
// They can provide tracking information right away or create fulfillments without it and then
// update the tracking information for fulfillments with the
// [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
// mutation.
//
// [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
//
// ## API access scopes
//
// Fulfillment orders are governed by the following API access scopes:
//
// * The `read_merchant_managed_fulfillment_orders` and
// `write_merchant_managed_fulfillment_orders` access scopes
// grant access to fulfillment orders assigned to merchant-managed locations.
// * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
// access scopes are intended for fulfillment services.
// These scopes grant access to fulfillment orders assigned to locations that are being managed
// by fulfillment services.
// * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
// access scopes grant access to fulfillment orders
// assigned to locations managed by other fulfillment services.
//
// ### Fulfillment service app access scopes
//
// Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
// and don't have the `*_third_party_fulfillment_orders`
// or `*_merchant_managed_fulfillment_orders` access scopes.
// The app will only have access to the fulfillment orders assigned to their location
// (or multiple locations if the app registers multiple fulfillment services on the shop).
// The app will not have access to fulfillment orders assigned to merchant-managed locations
// or locations owned by other fulfillment service apps.
//
// ### Order management app access scopes
//
// **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
// `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
// on behalf of a merchant.
//
// If an app combines the functions of an order management app and a fulfillment service,
// then the app should request all
// access scopes to manage all assigned and all unassigned fulfillment orders.
//
// ## Notifications about fulfillment orders
//
// Fulfillment services are required to
// [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
// a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
// whenever a merchant submits a fulfillment or cancellation request.
//
// Both merchants and apps can
// [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
// to the
// [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
// to be notified whenever fulfillment order related domain events occur.
//
// [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder struct {
	// A globally-unique ID.
	Id string `json:"id"`
	// The status of the fulfillment order.
	Status FulfillmentOrderStatus `json:"status"`
	// A list of the fulfillment order's line items.
	LineItems OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnection `json:"lineItems"`
	// The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
	//
	// The fulfillment order's assigned location might change in the following cases:
	//
	// - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
	// https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
	// ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
	// https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
	// ) field within the mutation's response.
	// - Work on the fulfillment order hasn't yet begun, which means that the fulfillment order has the
	// [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
	// [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
	// [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
	// status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
	AssignedLocation OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation `json:"assignedLocation"`
	// The destination where the items should be sent.
	Destination OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination `json:"destination"`
	// A list of fulfillments for the fulfillment order.
	Fulfillments OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnection `json:"fulfillments"`
}

// GetId returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder.Id, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder) GetId() string {
	return v.Id
}

// GetStatus returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder.Status, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder) GetStatus() FulfillmentOrderStatus {
	return v.Status
}

// GetLineItems returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder.LineItems, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder) GetLineItems() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnection {
	return v.LineItems
}

// GetAssignedLocation returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder.AssignedLocation, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder) GetAssignedLocation() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation {
	return v.AssignedLocation
}

// GetDestination returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder.Destination, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder) GetDestination() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination {
	return v.Destination
}

// GetFulfillments returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder.Fulfillments, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrder) GetFulfillments() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnection {
	return v.Fulfillments
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation includes the requested fields of the GraphQL type FulfillmentOrderAssignedLocation.
// The GraphQL type's documentation follows.
//
// The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
//
// The fulfillment order's assigned location might change in the following cases:
//
// - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
// https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
// ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
// https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
// ) field within the mutation's response.
//
// - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
// [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
// [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
// [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
// status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
//
// If the [fulfillmentOrderMove](
// https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
// ) mutation has moved the fulfillment order's line items to a new location,
// but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
// doesn't change.
// This happens if the fulfillment order is being split during the move, or if all line items can be moved
// to an existing fulfillment order at a new location.
//
// Once the fulfillment order has been taken into work or canceled,
// which means that the fulfillment order has the
// [IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
// [CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
// [CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
// [INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
// status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
// Up-to-date shop's location data may be queried through [location](
// https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
// ) connection.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation struct {
	// The name of the location.
	Name string `json:"name"`
	// The phone number of the location.
	Phone string `json:"phone"`
	// The first line of the address for the location.
	Address1 string `json:"address1"`
	// The second line of the address for the location.
	Address2 string `json:"address2"`
	// The city of the location.
	City string `json:"city"`
	// The province of the location.
	Province string `json:"province"`
	// The two-letter country code of the location.
	CountryCode CountryCode `json:"countryCode"`
	// The ZIP code of the location.
	Zip string `json:"zip"`
	// The location where the fulfillment is expected to happen. This value might be different from
	// `FulfillmentOrderAssignedLocation` if the location's attributes were updated
	// after the fulfillment order was taken into work of canceled.
	Location OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocationLocation `json:"location"`
}

// GetName returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation.Name, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation) GetName() string {
	return v.Name
}

// GetPhone returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation.Phone, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation) GetPhone() string {
	return v.Phone
}

// GetAddress1 returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation.Address1, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation) GetAddress1() string {
	return v.Address1
}

// GetAddress2 returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation.Address2, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation) GetAddress2() string {
	return v.Address2
}

// GetCity returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation.City, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation) GetCity() string {
	return v.City
}

// GetProvince returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation.Province, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation) GetProvince() string {
	return v.Province
}

// GetCountryCode returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation.CountryCode, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation) GetCountryCode() CountryCode {
	return v.CountryCode
}

// GetZip returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation.Zip, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation) GetZip() string {
	return v.Zip
}

// GetLocation returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation.Location, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocation) GetLocation() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocationLocation {
	return v.Location
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocationLocation includes the requested fields of the GraphQL type Location.
// The GraphQL type's documentation follows.
//
// Represents the location where the physical good resides. You can stock inventory at active locations. Active
// locations that have `fulfills_online_orders: true` and are configured with a shipping rate, pickup enabled or
// local delivery will be able to sell from their storefront.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocationLocation struct {
	// A globally-unique ID.
	Id string `json:"id"`
}

// GetId returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocationLocation.Id, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderAssignedLocationLocation) GetId() string {
	return v.Id
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination includes the requested fields of the GraphQL type FulfillmentOrderDestination.
// The GraphQL type's documentation follows.
//
// Represents the destination where the items should be sent upon fulfillment.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination struct {
	// The first line of the address of the destination.
	Address1 string `json:"address1"`
	// The second line of the address of the destination.
	Address2 string `json:"address2"`
	// The city of the destination.
	City string `json:"city"`
	// The company of the destination.
	Company string `json:"company"`
	// The province of the destination.
	Province string `json:"province"`
	// The two-letter country code of the destination.
	CountryCode CountryCode `json:"countryCode"`
	// The first name of the customer at the destination.
	FirstName string `json:"firstName"`
	// The last name of the customer at the destination.
	LastName string `json:"lastName"`
	// The ZIP code of the destination.
	Zip string `json:"zip"`
	// The phone number of the customer at the destination.
	Phone string `json:"phone"`
	// The email of the customer at the destination.
	Email string `json:"email"`
}

// GetAddress1 returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.Address1, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetAddress1() string {
	return v.Address1
}

// GetAddress2 returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.Address2, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetAddress2() string {
	return v.Address2
}

// GetCity returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.City, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetCity() string {
	return v.City
}

// GetCompany returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.Company, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetCompany() string {
	return v.Company
}

// GetProvince returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.Province, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetProvince() string {
	return v.Province
}

// GetCountryCode returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.CountryCode, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetCountryCode() CountryCode {
	return v.CountryCode
}

// GetFirstName returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.FirstName, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetFirstName() string {
	return v.FirstName
}

// GetLastName returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.LastName, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetLastName() string {
	return v.LastName
}

// GetZip returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.Zip, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetZip() string {
	return v.Zip
}

// GetPhone returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.Phone, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetPhone() string {
	return v.Phone
}

// GetEmail returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination.Email, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderDestination) GetEmail() string {
	return v.Email
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnection includes the requested fields of the GraphQL type FulfillmentConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple Fulfillments.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnection struct {
	// A list of nodes that are contained in FulfillmentEdge. You can fetch data
	// about an individual node, or you can follow the edges to fetch data about a
	// collection of related nodes. At each node, you specify the fields that you
	// want to retrieve.
	Nodes []OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment `json:"nodes"`
}

// GetNodes returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnection) GetNodes() []OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment {
	return v.Nodes
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment includes the requested fields of the GraphQL type Fulfillment.
// The GraphQL type's documentation follows.
//
// Represents a fulfillment.
// In Shopify, a fulfillment represents a shipment of one or more items in an order.
// When an order has been completely fulfilled, it means that all the items that are included
// in the order have been sent to the customer.
// There can be more than one fulfillment for an order.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment struct {
	// The status of the fulfillment.
	Status FulfillmentStatus `json:"status"`
	// A globally-unique ID.
	Id string `json:"id"`
	// Fulfillment service associated with the fulfillment.
	Service OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillmentService `json:"service"`
}

// GetStatus returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment.Status, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment) GetStatus() FulfillmentStatus {
	return v.Status
}

// GetId returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment.Id, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment) GetId() string {
	return v.Id
}

// GetService returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment.Service, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillment) GetService() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillmentService {
	return v.Service
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillmentService includes the requested fields of the GraphQL type FulfillmentService.
// The GraphQL type's documentation follows.
//
// A **Fulfillment Service** is a third party warehouse that prepares and ships orders
// on behalf of the store owner. Fulfillment services charge a fee to package and ship items
// and update product inventory levels. Some well known fulfillment services with Shopify integrations
// include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
// Shopify automatically creates a `Location` that's associated to the fulfillment service.
// To learn more about fulfillment services, refer to
// [Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
// guide.
//
// ## Mutations
//
// You can work with the `FulfillmentService` object with the
// [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
// [fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
// and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
// mutations.
//
// ## Hosted endpoints
//
// Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
// Shopify can query on certain conditions.
// These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
// in the
// [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
// mutation.
//
// - Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
// to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests.
//
// For more information, refer to
// [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
// - Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders
// if `trackingSupport` is set to `true`.
//
// For more information, refer to
// [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).
//
// Fulfillment services can also update tracking information using the
// [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdate) mutation,
// rather than waiting for Shopify to ask for tracking numbers.
// - Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve
// on hand inventory levels for the fulfillment service location if `inventoryManagement` is set to `true`.
//
// For more information, refer to
// [Sharing inventory levels with Shopify](https://shopify.dev/apps/build/orders-fulfillment/fulfillment-service-apps/build-for-fulfillment-services#step-10-optional-share-inventory-levels-with-shopify).
//
// To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
// in your development store.
//
// ## Resources and webhooks
//
// There are a variety of objects and webhooks that enable a fulfillment service to work.
// To exchange fulfillment information with Shopify, fulfillment services use the
// [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
// [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
// [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
// To act on fulfillment process events that happen on the Shopify side,
// besides awaiting calls to `callbackUrl`-prefixed endpoints,
// fulfillment services can subscribe to the
// [fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
// and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
// webhooks.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillmentService struct {
	// Type associated with the fulfillment service.
	Type FulfillmentServiceType `json:"type"`
}

// GetType returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillmentService.Type, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderFulfillmentsFulfillmentConnectionNodesFulfillmentService) GetType() FulfillmentServiceType {
	return v.Type
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnection includes the requested fields of the GraphQL type FulfillmentOrderLineItemConnection.
// The GraphQL type's documentation follows.
//
// An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnection struct {
	// A list of nodes that are contained in FulfillmentOrderLineItemEdge. You can
	// fetch data about an individual node, or you can follow the edges to fetch data
	// about a collection of related nodes. At each node, you specify the fields that
	// you want to retrieve.
	Nodes []OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem `json:"nodes"`
}

// GetNodes returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnection.Nodes, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnection) GetNodes() []OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem {
	return v.Nodes
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem includes the requested fields of the GraphQL type FulfillmentOrderLineItem.
// The GraphQL type's documentation follows.
//
// Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem struct {
	// Whether physical shipping is required for the variant.
	RequiresShipping bool `json:"requiresShipping"`
	// The title of the product.
	ProductTitle string `json:"productTitle"`
	// The name of the variant.
	VariantTitle string `json:"variantTitle"`
	// The variant SKU number.
	Sku string `json:"sku"`
	// The total number of units to be fulfilled.
	TotalQuantity int `json:"totalQuantity"`
	// The variant unit price without discounts applied, in shop and presentment currencies.
	OriginalUnitPriceSet OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBag `json:"originalUnitPriceSet"`
	// The weight of a line item unit.
	Weight OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemWeight `json:"weight"`
}

// GetRequiresShipping returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem.RequiresShipping, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem) GetRequiresShipping() bool {
	return v.RequiresShipping
}

// GetProductTitle returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem.ProductTitle, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem) GetProductTitle() string {
	return v.ProductTitle
}

// GetVariantTitle returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem.VariantTitle, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem) GetVariantTitle() string {
	return v.VariantTitle
}

// GetSku returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem.Sku, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem) GetSku() string {
	return v.Sku
}

// GetTotalQuantity returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem.TotalQuantity, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem) GetTotalQuantity() int {
	return v.TotalQuantity
}

// GetOriginalUnitPriceSet returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem.OriginalUnitPriceSet, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem) GetOriginalUnitPriceSet() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBag {
	return v.OriginalUnitPriceSet
}

// GetWeight returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem.Weight, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItem) GetWeight() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemWeight {
	return v.Weight
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBag includes the requested fields of the GraphQL type MoneyBag.
// The GraphQL type's documentation follows.
//
// A collection of monetary values in their respective currencies. Typically used
// in the context of multi-currency pricing and transactions,
// when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBag struct {
	// Amount in presentment currency.
	PresentmentMoney OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagPresentmentMoneyMoneyV2 `json:"presentmentMoney"`
	// Amount in shop currency.
	ShopMoney OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagShopMoneyMoneyV2 `json:"shopMoney"`
}

// GetPresentmentMoney returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBag.PresentmentMoney, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBag) GetPresentmentMoney() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagPresentmentMoneyMoneyV2 {
	return v.PresentmentMoney
}

// GetShopMoney returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBag.ShopMoney, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBag) GetShopMoney() OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagShopMoneyMoneyV2 {
	return v.ShopMoney
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagPresentmentMoneyMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagPresentmentMoneyMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
	// The three-letter currency code that represents a world currency used in a store. Currency codes
	// include standard [standard ISO 4217 codes](https://en.wikipedia.org/wiki/ISO_4217), legacy codes,
	// and non-standard codes. For example, USD.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

// GetAmount returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagPresentmentMoneyMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagPresentmentMoneyMoneyV2) GetAmount() string {
	return v.Amount
}

// GetCurrencyCode returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagPresentmentMoneyMoneyV2.CurrencyCode, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagPresentmentMoneyMoneyV2) GetCurrencyCode() CurrencyCode {
	return v.CurrencyCode
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagShopMoneyMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagShopMoneyMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
	// The three-letter currency code that represents a world currency used in a store. Currency codes
	// include standard [standard ISO 4217 codes](https://en.wikipedia.org/wiki/ISO_4217), legacy codes,
	// and non-standard codes. For example, USD.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

// GetAmount returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagShopMoneyMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagShopMoneyMoneyV2) GetAmount() string {
	return v.Amount
}

// GetCurrencyCode returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagShopMoneyMoneyV2.CurrencyCode, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemOriginalUnitPriceSetMoneyBagShopMoneyMoneyV2) GetCurrencyCode() CurrencyCode {
	return v.CurrencyCode
}

// OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemWeight includes the requested fields of the GraphQL type Weight.
// The GraphQL type's documentation follows.
//
// A weight, which includes a numeric value and a unit of measurement.
type OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemWeight struct {
	// The unit of measurement for `value`.
	Unit WeightUnit `json:"unit"`
	// The weight value using the unit system specified with `unit`.
	Value float64 `json:"value"`
}

// GetUnit returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemWeight.Unit, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemWeight) GetUnit() WeightUnit {
	return v.Unit
}

// GetValue returns OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemWeight.Value, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderFulfillmentOrdersFulfillmentOrderConnectionNodesFulfillmentOrderLineItemsFulfillmentOrderLineItemConnectionNodesFulfillmentOrderLineItemWeight) GetValue() float64 {
	return v.Value
}

// OrderDetailByIdOrderShippingLine includes the requested fields of the GraphQL type ShippingLine.
// The GraphQL type's documentation follows.
//
// Represents the shipping details that the customer chose for their order.
type OrderDetailByIdOrderShippingLine struct {
	// Returns the title of the shipping line.
	Title string `json:"title"`
}

// GetTitle returns OrderDetailByIdOrderShippingLine.Title, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderShippingLine) GetTitle() string { return v.Title }

// OrderDetailByIdOrderTotalPriceSetMoneyBag includes the requested fields of the GraphQL type MoneyBag.
// The GraphQL type's documentation follows.
//
// A collection of monetary values in their respective currencies. Typically used
// in the context of multi-currency pricing and transactions,
// when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
type OrderDetailByIdOrderTotalPriceSetMoneyBag struct {
	// Amount in presentment currency.
	PresentmentMoney OrderDetailByIdOrderTotalPriceSetMoneyBagPresentmentMoneyMoneyV2 `json:"presentmentMoney"`
	// Amount in shop currency.
	ShopMoney OrderDetailByIdOrderTotalPriceSetMoneyBagShopMoneyMoneyV2 `json:"shopMoney"`
}

// GetPresentmentMoney returns OrderDetailByIdOrderTotalPriceSetMoneyBag.PresentmentMoney, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderTotalPriceSetMoneyBag) GetPresentmentMoney() OrderDetailByIdOrderTotalPriceSetMoneyBagPresentmentMoneyMoneyV2 {
	return v.PresentmentMoney
}

// GetShopMoney returns OrderDetailByIdOrderTotalPriceSetMoneyBag.ShopMoney, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderTotalPriceSetMoneyBag) GetShopMoney() OrderDetailByIdOrderTotalPriceSetMoneyBagShopMoneyMoneyV2 {
	return v.ShopMoney
}

// OrderDetailByIdOrderTotalPriceSetMoneyBagPresentmentMoneyMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type OrderDetailByIdOrderTotalPriceSetMoneyBagPresentmentMoneyMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
	// The three-letter currency code that represents a world currency used in a store. Currency codes
	// include standard [standard ISO 4217 codes](https://en.wikipedia.org/wiki/ISO_4217), legacy codes,
	// and non-standard codes. For example, USD.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

// GetAmount returns OrderDetailByIdOrderTotalPriceSetMoneyBagPresentmentMoneyMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderTotalPriceSetMoneyBagPresentmentMoneyMoneyV2) GetAmount() string {
	return v.Amount
}

// GetCurrencyCode returns OrderDetailByIdOrderTotalPriceSetMoneyBagPresentmentMoneyMoneyV2.CurrencyCode, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderTotalPriceSetMoneyBagPresentmentMoneyMoneyV2) GetCurrencyCode() CurrencyCode {
	return v.CurrencyCode
}

// OrderDetailByIdOrderTotalPriceSetMoneyBagShopMoneyMoneyV2 includes the requested fields of the GraphQL type MoneyV2.
// The GraphQL type's documentation follows.
//
// A precise monetary value and its associated currency. For example, 12.99 USD.
type OrderDetailByIdOrderTotalPriceSetMoneyBagShopMoneyMoneyV2 struct {
	// A monetary value in decimal format, allowing for precise representation of cents or fractional
	// currency. For example, 12.99.
	Amount string `json:"amount"`
	// The three-letter currency code that represents a world currency used in a store. Currency codes
	// include standard [standard ISO 4217 codes](https://en.wikipedia.org/wiki/ISO_4217), legacy codes,
	// and non-standard codes. For example, USD.
	CurrencyCode CurrencyCode `json:"currencyCode"`
}

// GetAmount returns OrderDetailByIdOrderTotalPriceSetMoneyBagShopMoneyMoneyV2.Amount, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderTotalPriceSetMoneyBagShopMoneyMoneyV2) GetAmount() string {
	return v.Amount
}

// GetCurrencyCode returns OrderDetailByIdOrderTotalPriceSetMoneyBagShopMoneyMoneyV2.CurrencyCode, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderTotalPriceSetMoneyBagShopMoneyMoneyV2) GetCurrencyCode() CurrencyCode {
	return v.CurrencyCode
}

// OrderDetailByIdOrderTransactionsOrderTransaction includes the requested fields of the GraphQL type OrderTransaction.
// The GraphQL type's documentation follows.
//
// The `OrderTransaction` object represents a payment transaction that's associated with an order. An order
// transaction is a specific action or event that happens within the context of an order, such as a customer paying
// for a purchase or receiving a refund, or other payment-related activity.
//
// Use the `OrderTransaction` object to capture the complete lifecycle of a payment, from initial
// authorization to final settlement, including refunds and currency exchanges. Common use cases for using the
// `OrderTransaction` object include:
//
// - Processing new payments for orders
// - Managing payment authorizations and captures
// - Processing refunds for returned items
// - Tracking payment status and errors
// - Managing multi-currency transactions
// - Handling payment gateway integrations
//
// Each `OrderTransaction` object has a [`kind`](https://shopify.dev/docs/api/admin-graphql/latest/enums/OrderTransactionKind)
// that defines the type of transaction and a [`status`](https://shopify.dev/docs/api/admin-graphql/latest/enums/OrderTransactionStatus)
// that indicates the current state of the transaction. The object stores detailed information about payment
// methods, gateway processing, and settlement details.
//
// Learn more about [payment processing](https://help.shopify.com/manual/payments)
// and [payment gateway integrations](https://www.shopify.com/ca/payment-gateways).
type OrderDetailByIdOrderTransactionsOrderTransaction struct {
	// The payment gateway used to process the transaction.
	Gateway string `json:"gateway"`
}

// GetGateway returns OrderDetailByIdOrderTransactionsOrderTransaction.Gateway, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdOrderTransactionsOrderTransaction) GetGateway() string { return v.Gateway }

// OrderDetailByIdResponse is returned by OrderDetailById on success.
type OrderDetailByIdResponse struct {
	// The `order` query retrieves an
	// [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/order) by
	// its ID. This query provides access to comprehensive order information such as
	// customer details, line items, financial data, and fulfillment status.
	//
	// Use the `order` query to retrieve information associated with the following processes:
	//
	// - [Order management and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps)
	// - [Financial reporting](https://help.shopify.com/manual/finance)
	// - [Customer purchase history](https://help.shopify.com/manual/reports-and-analytics/shopify-reports/report-types/default-reports/customers-reports)
	// and [transaction analysis](https://shopify.dev/docs/apps/launch/billing/view-charges-earnings#transaction-data-through-the-graphql-admin-api)
	// - [Shipping](https://shopify.dev/docs/apps/build/checkout/delivery-shipping) and [inventory management](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps)
	//
	// You can only retrieve the last 60 days worth of orders from a store by
	// default. If you want to access older orders, then you need to [request access to all
	// orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions).
	//
	// For large order datasets, consider using [bulk operations](https://shopify.dev/docs/api/usage/bulk-operations/queries).
	// Bulk operations handle pagination automatically and allow you to retrieve data
	// asynchronously without being constrained by API rate limits.
	// Learn more about [creating orders](https://shopify.dev/docs/api/admin-graphql/latest/mutations/ordercreate)
	// and [building order management
	// apps](https://shopify.dev/docs/apps/build/orders-fulfillment).
	Order OrderDetailByIdOrder `json:"order"`
}

// GetOrder returns OrderDetailByIdResponse.Order, and is useful for accessing the field via an interface.
func (v *OrderDetailByIdResponse) GetOrder() OrderDetailByIdOrder { return v.Order }

// TagsAddResponse is returned by TagsAdd on success.
type TagsAddResponse struct {
	// Add tags to an order, a draft order, a customer, a product, or an online store article.
	TagsAdd TagsAddTagsAddTagsAddPayload `json:"tagsAdd"`
}

// GetTagsAdd returns TagsAddResponse.TagsAdd, and is useful for accessing the field via an interface.
func (v *TagsAddResponse) GetTagsAdd() TagsAddTagsAddTagsAddPayload { return v.TagsAdd }

// TagsAddTagsAddTagsAddPayload includes the requested fields of the GraphQL type TagsAddPayload.
// The GraphQL type's documentation follows.
//
// Return type for `tagsAdd` mutation.
type TagsAddTagsAddTagsAddPayload struct {
	Typename string `json:"__typename"`
	// The list of errors that occurred from executing the mutation.
	UserErrors []TagsAddTagsAddTagsAddPayloadUserErrorsUserError `json:"userErrors"`
}

// GetTypename returns TagsAddTagsAddTagsAddPayload.Typename, and is useful for accessing the field via an interface.
func (v *TagsAddTagsAddTagsAddPayload) GetTypename() string { return v.Typename }

// GetUserErrors returns TagsAddTagsAddTagsAddPayload.UserErrors, and is useful for accessing the field via an interface.
func (v *TagsAddTagsAddTagsAddPayload) GetUserErrors() []TagsAddTagsAddTagsAddPayloadUserErrorsUserError {
	return v.UserErrors
}

// TagsAddTagsAddTagsAddPayloadUserErrorsUserError includes the requested fields of the GraphQL type UserError.
// The GraphQL type's documentation follows.
//
// Represents an error in the input of a mutation.
type TagsAddTagsAddTagsAddPayloadUserErrorsUserError struct {
	// The error message.
	Message string `json:"message"`
}

// GetMessage returns TagsAddTagsAddTagsAddPayloadUserErrorsUserError.Message, and is useful for accessing the field via an interface.
func (v *TagsAddTagsAddTagsAddPayloadUserErrorsUserError) GetMessage() string { return v.Message }

// Available customer tax exemptions.
type TaxExemption string

const (
	// This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
	TaxExemptionCaStatusCardExemption TaxExemption = "CA_STATUS_CARD_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
	TaxExemptionCaBcResellerExemption TaxExemption = "CA_BC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
	TaxExemptionCaMbResellerExemption TaxExemption = "CA_MB_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkResellerExemption TaxExemption = "CA_SK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
	TaxExemptionCaDiplomatExemption TaxExemption = "CA_DIPLOMAT_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
	TaxExemptionCaBcCommercialFisheryExemption TaxExemption = "CA_BC_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
	TaxExemptionCaMbCommercialFisheryExemption TaxExemption = "CA_MB_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
	TaxExemptionCaNsCommercialFisheryExemption TaxExemption = "CA_NS_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
	TaxExemptionCaPeCommercialFisheryExemption TaxExemption = "CA_PE_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkCommercialFisheryExemption TaxExemption = "CA_SK_COMMERCIAL_FISHERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
	TaxExemptionCaBcProductionAndMachineryExemption TaxExemption = "CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkProductionAndMachineryExemption TaxExemption = "CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
	TaxExemptionCaBcSubContractorExemption TaxExemption = "CA_BC_SUB_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkSubContractorExemption TaxExemption = "CA_SK_SUB_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
	TaxExemptionCaBcContractorExemption TaxExemption = "CA_BC_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkContractorExemption TaxExemption = "CA_SK_CONTRACTOR_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
	TaxExemptionCaOnPurchaseExemption TaxExemption = "CA_ON_PURCHASE_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
	TaxExemptionCaMbFarmerExemption TaxExemption = "CA_MB_FARMER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
	TaxExemptionCaNsFarmerExemption TaxExemption = "CA_NS_FARMER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
	TaxExemptionCaSkFarmerExemption TaxExemption = "CA_SK_FARMER_EXEMPTION"
	// This customer is exempt from VAT for purchases within the EU that is shipping
	// from outside of customer's country, as well as purchases from the EU to the UK.
	TaxExemptionEuReverseChargeExemptionRule TaxExemption = "EU_REVERSE_CHARGE_EXEMPTION_RULE"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama.
	TaxExemptionUsAlResellerExemption TaxExemption = "US_AL_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska.
	TaxExemptionUsAkResellerExemption TaxExemption = "US_AK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona.
	TaxExemptionUsAzResellerExemption TaxExemption = "US_AZ_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas.
	TaxExemptionUsArResellerExemption TaxExemption = "US_AR_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California.
	TaxExemptionUsCaResellerExemption TaxExemption = "US_CA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado.
	TaxExemptionUsCoResellerExemption TaxExemption = "US_CO_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut.
	TaxExemptionUsCtResellerExemption TaxExemption = "US_CT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware.
	TaxExemptionUsDeResellerExemption TaxExemption = "US_DE_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida.
	TaxExemptionUsFlResellerExemption TaxExemption = "US_FL_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia.
	TaxExemptionUsGaResellerExemption TaxExemption = "US_GA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii.
	TaxExemptionUsHiResellerExemption TaxExemption = "US_HI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho.
	TaxExemptionUsIdResellerExemption TaxExemption = "US_ID_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois.
	TaxExemptionUsIlResellerExemption TaxExemption = "US_IL_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana.
	TaxExemptionUsInResellerExemption TaxExemption = "US_IN_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa.
	TaxExemptionUsIaResellerExemption TaxExemption = "US_IA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas.
	TaxExemptionUsKsResellerExemption TaxExemption = "US_KS_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky.
	TaxExemptionUsKyResellerExemption TaxExemption = "US_KY_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana.
	TaxExemptionUsLaResellerExemption TaxExemption = "US_LA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine.
	TaxExemptionUsMeResellerExemption TaxExemption = "US_ME_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland.
	TaxExemptionUsMdResellerExemption TaxExemption = "US_MD_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts.
	TaxExemptionUsMaResellerExemption TaxExemption = "US_MA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan.
	TaxExemptionUsMiResellerExemption TaxExemption = "US_MI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota.
	TaxExemptionUsMnResellerExemption TaxExemption = "US_MN_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi.
	TaxExemptionUsMsResellerExemption TaxExemption = "US_MS_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri.
	TaxExemptionUsMoResellerExemption TaxExemption = "US_MO_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana.
	TaxExemptionUsMtResellerExemption TaxExemption = "US_MT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska.
	TaxExemptionUsNeResellerExemption TaxExemption = "US_NE_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada.
	TaxExemptionUsNvResellerExemption TaxExemption = "US_NV_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire.
	TaxExemptionUsNhResellerExemption TaxExemption = "US_NH_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey.
	TaxExemptionUsNjResellerExemption TaxExemption = "US_NJ_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico.
	TaxExemptionUsNmResellerExemption TaxExemption = "US_NM_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York.
	TaxExemptionUsNyResellerExemption TaxExemption = "US_NY_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina.
	TaxExemptionUsNcResellerExemption TaxExemption = "US_NC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota.
	TaxExemptionUsNdResellerExemption TaxExemption = "US_ND_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio.
	TaxExemptionUsOhResellerExemption TaxExemption = "US_OH_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma.
	TaxExemptionUsOkResellerExemption TaxExemption = "US_OK_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon.
	TaxExemptionUsOrResellerExemption TaxExemption = "US_OR_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania.
	TaxExemptionUsPaResellerExemption TaxExemption = "US_PA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island.
	TaxExemptionUsRiResellerExemption TaxExemption = "US_RI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina.
	TaxExemptionUsScResellerExemption TaxExemption = "US_SC_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota.
	TaxExemptionUsSdResellerExemption TaxExemption = "US_SD_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee.
	TaxExemptionUsTnResellerExemption TaxExemption = "US_TN_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas.
	TaxExemptionUsTxResellerExemption TaxExemption = "US_TX_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah.
	TaxExemptionUsUtResellerExemption TaxExemption = "US_UT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont.
	TaxExemptionUsVtResellerExemption TaxExemption = "US_VT_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia.
	TaxExemptionUsVaResellerExemption TaxExemption = "US_VA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington.
	TaxExemptionUsWaResellerExemption TaxExemption = "US_WA_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia.
	TaxExemptionUsWvResellerExemption TaxExemption = "US_WV_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin.
	TaxExemptionUsWiResellerExemption TaxExemption = "US_WI_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming.
	TaxExemptionUsWyResellerExemption TaxExemption = "US_WY_RESELLER_EXEMPTION"
	// This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC.
	TaxExemptionUsDcResellerExemption TaxExemption = "US_DC_RESELLER_EXEMPTION"
)

var AllTaxExemption = []TaxExemption{
	TaxExemptionCaStatusCardExemption,
	TaxExemptionCaBcResellerExemption,
	TaxExemptionCaMbResellerExemption,
	TaxExemptionCaSkResellerExemption,
	TaxExemptionCaDiplomatExemption,
	TaxExemptionCaBcCommercialFisheryExemption,
	TaxExemptionCaMbCommercialFisheryExemption,
	TaxExemptionCaNsCommercialFisheryExemption,
	TaxExemptionCaPeCommercialFisheryExemption,
	TaxExemptionCaSkCommercialFisheryExemption,
	TaxExemptionCaBcProductionAndMachineryExemption,
	TaxExemptionCaSkProductionAndMachineryExemption,
	TaxExemptionCaBcSubContractorExemption,
	TaxExemptionCaSkSubContractorExemption,
	TaxExemptionCaBcContractorExemption,
	TaxExemptionCaSkContractorExemption,
	TaxExemptionCaOnPurchaseExemption,
	TaxExemptionCaMbFarmerExemption,
	TaxExemptionCaNsFarmerExemption,
	TaxExemptionCaSkFarmerExemption,
	TaxExemptionEuReverseChargeExemptionRule,
	TaxExemptionUsAlResellerExemption,
	TaxExemptionUsAkResellerExemption,
	TaxExemptionUsAzResellerExemption,
	TaxExemptionUsArResellerExemption,
	TaxExemptionUsCaResellerExemption,
	TaxExemptionUsCoResellerExemption,
	TaxExemptionUsCtResellerExemption,
	TaxExemptionUsDeResellerExemption,
	TaxExemptionUsFlResellerExemption,
	TaxExemptionUsGaResellerExemption,
	TaxExemptionUsHiResellerExemption,
	TaxExemptionUsIdResellerExemption,
	TaxExemptionUsIlResellerExemption,
	TaxExemptionUsInResellerExemption,
	TaxExemptionUsIaResellerExemption,
	TaxExemptionUsKsResellerExemption,
	TaxExemptionUsKyResellerExemption,
	TaxExemptionUsLaResellerExemption,
	TaxExemptionUsMeResellerExemption,
	TaxExemptionUsMdResellerExemption,
	TaxExemptionUsMaResellerExemption,
	TaxExemptionUsMiResellerExemption,
	TaxExemptionUsMnResellerExemption,
	TaxExemptionUsMsResellerExemption,
	TaxExemptionUsMoResellerExemption,
	TaxExemptionUsMtResellerExemption,
	TaxExemptionUsNeResellerExemption,
	TaxExemptionUsNvResellerExemption,
	TaxExemptionUsNhResellerExemption,
	TaxExemptionUsNjResellerExemption,
	TaxExemptionUsNmResellerExemption,
	TaxExemptionUsNyResellerExemption,
	TaxExemptionUsNcResellerExemption,
	TaxExemptionUsNdResellerExemption,
	TaxExemptionUsOhResellerExemption,
	TaxExemptionUsOkResellerExemption,
	TaxExemptionUsOrResellerExemption,
	TaxExemptionUsPaResellerExemption,
	TaxExemptionUsRiResellerExemption,
	TaxExemptionUsScResellerExemption,
	TaxExemptionUsSdResellerExemption,
	TaxExemptionUsTnResellerExemption,
	TaxExemptionUsTxResellerExemption,
	TaxExemptionUsUtResellerExemption,
	TaxExemptionUsVtResellerExemption,
	TaxExemptionUsVaResellerExemption,
	TaxExemptionUsWaResellerExemption,
	TaxExemptionUsWvResellerExemption,
	TaxExemptionUsWiResellerExemption,
	TaxExemptionUsWyResellerExemption,
	TaxExemptionUsDcResellerExemption,
}

// Units of measurement for weight.
type WeightUnit string

const (
	// 1 kilogram equals 1000 grams.
	WeightUnitKilograms WeightUnit = "KILOGRAMS"
	// Metric system unit of mass.
	WeightUnitGrams WeightUnit = "GRAMS"
	// 1 pound equals 16 ounces.
	WeightUnitPounds WeightUnit = "POUNDS"
	// Imperial system unit of mass.
	WeightUnitOunces WeightUnit = "OUNCES"
)

var AllWeightUnit = []WeightUnit{
	WeightUnitKilograms,
	WeightUnitGrams,
	WeightUnitPounds,
	WeightUnitOunces,
}

// __CreateCustomerInput is used internally by genqlient
type __CreateCustomerInput struct {
	Input CustomerInput `json:"input"`
}

// GetInput returns __CreateCustomerInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateCustomerInput) GetInput() CustomerInput { return v.Input }

// __DraftOrderCompleteInput is used internally by genqlient
type __DraftOrderCompleteInput struct {
	Id string `json:"id"`
}

// GetId returns __DraftOrderCompleteInput.Id, and is useful for accessing the field via an interface.
func (v *__DraftOrderCompleteInput) GetId() string { return v.Id }

// __FulfillmentCreateV2Input is used internally by genqlient
type __FulfillmentCreateV2Input struct {
	Fulfillment FulfillmentV2Input `json:"fulfillment"`
}

// GetFulfillment returns __FulfillmentCreateV2Input.Fulfillment, and is useful for accessing the field via an interface.
func (v *__FulfillmentCreateV2Input) GetFulfillment() FulfillmentV2Input { return v.Fulfillment }

// __GetCustomerInput is used internally by genqlient
type __GetCustomerInput struct {
	Query string `json:"query"`
}

// GetQuery returns __GetCustomerInput.Query, and is useful for accessing the field via an interface.
func (v *__GetCustomerInput) GetQuery() string { return v.Query }

// __GetDraftOrderInput is used internally by genqlient
type __GetDraftOrderInput struct {
	Query string `json:"query"`
}

// GetQuery returns __GetDraftOrderInput.Query, and is useful for accessing the field via an interface.
func (v *__GetDraftOrderInput) GetQuery() string { return v.Query }

// __GetFulfillmentInput is used internally by genqlient
type __GetFulfillmentInput struct {
	Id string `json:"id"`
}

// GetId returns __GetFulfillmentInput.Id, and is useful for accessing the field via an interface.
func (v *__GetFulfillmentInput) GetId() string { return v.Id }

// __GetFulfillmentOrderInput is used internally by genqlient
type __GetFulfillmentOrderInput struct {
	Id string `json:"id"`
}

// GetId returns __GetFulfillmentOrderInput.Id, and is useful for accessing the field via an interface.
func (v *__GetFulfillmentOrderInput) GetId() string { return v.Id }

// __GetProductInput is used internally by genqlient
type __GetProductInput struct {
	Id string `json:"id"`
}

// GetId returns __GetProductInput.Id, and is useful for accessing the field via an interface.
func (v *__GetProductInput) GetId() string { return v.Id }

// __OrderDetailByIdInput is used internally by genqlient
type __OrderDetailByIdInput struct {
	Id string `json:"id"`
}

// GetId returns __OrderDetailByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__OrderDetailByIdInput) GetId() string { return v.Id }

// __TagsAddInput is used internally by genqlient
type __TagsAddInput struct {
	Id  string `json:"id"`
	Tag string `json:"tag"`
}

// GetId returns __TagsAddInput.Id, and is useful for accessing the field via an interface.
func (v *__TagsAddInput) GetId() string { return v.Id }

// GetTag returns __TagsAddInput.Tag, and is useful for accessing the field via an interface.
func (v *__TagsAddInput) GetTag() string { return v.Tag }

// The mutation executed by CreateCustomer.
const CreateCustomer_Operation = `
mutation CreateCustomer ($input: CustomerInput!) {
	customerCreate(input: $input) {
		customer {
			id
		}
		userErrors {
			field
			message
		}
	}
}
`

func CreateCustomer(
	ctx_ context.Context,
	client_ graphql.Client,
	input CustomerInput,
) (data_ *CreateCustomerResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateCustomer",
		Query:  CreateCustomer_Operation,
		Variables: &__CreateCustomerInput{
			Input: input,
		},
	}

	data_ = &CreateCustomerResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by DeliveryProfiles.
const DeliveryProfiles_Operation = `
query DeliveryProfiles {
	deliveryProfiles(first: 50) {
		nodes {
			id
			name
		}
	}
}
`

func DeliveryProfiles(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *DeliveryProfilesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeliveryProfiles",
		Query:  DeliveryProfiles_Operation,
	}

	data_ = &DeliveryProfilesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DraftOrderComplete.
const DraftOrderComplete_Operation = `
mutation DraftOrderComplete ($id: ID!) {
	draftOrderComplete(id: $id) {
		draftOrder {
			id
		}
	}
}
`

func DraftOrderComplete(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DraftOrderCompleteResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DraftOrderComplete",
		Query:  DraftOrderComplete_Operation,
		Variables: &__DraftOrderCompleteInput{
			Id: id,
		},
	}

	data_ = &DraftOrderCompleteResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by FulfillmentCreateV2.
const FulfillmentCreateV2_Operation = `
mutation FulfillmentCreateV2 ($fulfillment: FulfillmentV2Input!) {
	fulfillmentCreateV2(fulfillment: $fulfillment) {
		fulfillment {
			id
			status
		}
		userErrors {
			field
			message
		}
	}
}
`

func FulfillmentCreateV2(
	ctx_ context.Context,
	client_ graphql.Client,
	fulfillment FulfillmentV2Input,
) (data_ *FulfillmentCreateV2Response, err_ error) {
	req_ := &graphql.Request{
		OpName: "FulfillmentCreateV2",
		Query:  FulfillmentCreateV2_Operation,
		Variables: &__FulfillmentCreateV2Input{
			Fulfillment: fulfillment,
		},
	}

	data_ = &FulfillmentCreateV2Response{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetCustomer.
const GetCustomer_Operation = `
query GetCustomer ($query: String!) {
	customers(first: 1, query: $query) {
		nodes {
			id
			firstName
			lastName
		}
	}
}
`

func GetCustomer(
	ctx_ context.Context,
	client_ graphql.Client,
	query string,
) (data_ *GetCustomerResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetCustomer",
		Query:  GetCustomer_Operation,
		Variables: &__GetCustomerInput{
			Query: query,
		},
	}

	data_ = &GetCustomerResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetDraftOrder.
const GetDraftOrder_Operation = `
query GetDraftOrder ($query: String) {
	draftOrders(first: 50, sortKey: UPDATED_AT, reverse: false, query: $query) {
		nodes {
			id
			name
			email
			phone
		}
	}
}
`

func GetDraftOrder(
	ctx_ context.Context,
	client_ graphql.Client,
	query string,
) (data_ *GetDraftOrderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetDraftOrder",
		Query:  GetDraftOrder_Operation,
		Variables: &__GetDraftOrderInput{
			Query: query,
		},
	}

	data_ = &GetDraftOrderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetFulfillment.
const GetFulfillment_Operation = `
query GetFulfillment ($id: ID!) {
	fulfillment(id: $id) {
		status
	}
}
`

func GetFulfillment(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetFulfillmentResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetFulfillment",
		Query:  GetFulfillment_Operation,
		Variables: &__GetFulfillmentInput{
			Id: id,
		},
	}

	data_ = &GetFulfillmentResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetFulfillmentOrder.
const GetFulfillmentOrder_Operation = `
query GetFulfillmentOrder ($id: ID!) {
	fulfillmentOrder(id: $id) {
		fulfillments(first: 20) {
			nodes {
				id
				status
			}
		}
	}
}
`

func GetFulfillmentOrder(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetFulfillmentOrderResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetFulfillmentOrder",
		Query:  GetFulfillmentOrder_Operation,
		Variables: &__GetFulfillmentOrderInput{
			Id: id,
		},
	}

	data_ = &GetFulfillmentOrderResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetProduct.
const GetProduct_Operation = `
query GetProduct ($id: ID!) {
	product(id: $id) {
		description
		variants(first: 10) {
			nodes {
				id
				title
				sku
				price
				image {
					url
				}
			}
		}
		priceRangeV2 {
			minVariantPrice {
				amount
			}
			maxVariantPrice {
				amount
			}
		}
		media(first: 10) {
			nodes {
				__typename
				preview {
					image {
						url
					}
				}
			}
		}
	}
}
`

func GetProduct(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetProductResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetProduct",
		Query:  GetProduct_Operation,
		Variables: &__GetProductInput{
			Id: id,
		},
	}

	data_ = &GetProductResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetProductsSelfService.
const GetProductsSelfService_Operation = `
query GetProductsSelfService {
	products(first: 50) {
		edges {
			node {
				id
				description
				title
				priceRangeV2 {
					minVariantPrice {
						amount
					}
					maxVariantPrice {
						amount
					}
				}
				media(first: 1) {
					nodes {
						__typename
						preview {
							image {
								url
							}
						}
					}
				}
			}
		}
	}
}
`

func GetProductsSelfService(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetProductsSelfServiceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetProductsSelfService",
		Query:  GetProductsSelfService_Operation,
	}

	data_ = &GetProductsSelfServiceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by OrderDetailById.
const OrderDetailById_Operation = `
query OrderDetailById ($id: ID!) {
	order(id: $id) {
		id
		email
		name
		note
		phone
		shippingLine {
			title
		}
		transactions {
			gateway
		}
		totalPriceSet {
			presentmentMoney {
				amount
				currencyCode
			}
			shopMoney {
				amount
				currencyCode
			}
		}
		currentTotalPriceSet {
			presentmentMoney {
				amount
				currencyCode
			}
			shopMoney {
				amount
				currencyCode
			}
		}
		fulfillmentOrders(first: 10, query: "status:OPEN OR status:CLOSED") {
			nodes {
				id
				status
				lineItems(first: 20) {
					nodes {
						requiresShipping
						productTitle
						variantTitle
						sku
						totalQuantity
						originalUnitPriceSet {
							presentmentMoney {
								amount
								currencyCode
							}
							shopMoney {
								amount
								currencyCode
							}
						}
						weight {
							unit
							value
						}
					}
				}
				assignedLocation {
					name
					phone
					address1
					address2
					city
					province
					countryCode
					zip
					location {
						id
					}
				}
				destination {
					address1
					address2
					city
					company
					province
					countryCode
					firstName
					lastName
					zip
					phone
					email
				}
				fulfillments(first: 1) {
					nodes {
						status
						id
						service {
							type
						}
					}
				}
			}
		}
		customAttributes {
			key
			value
		}
	}
}
`

func OrderDetailById(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *OrderDetailByIdResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "OrderDetailById",
		Query:  OrderDetailById_Operation,
		Variables: &__OrderDetailByIdInput{
			Id: id,
		},
	}

	data_ = &OrderDetailByIdResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by TagsAdd.
const TagsAdd_Operation = `
mutation TagsAdd ($id: ID!, $tag: String!) {
	tagsAdd(id: $id, tags: [$tag]) {
		__typename
		userErrors {
			message
		}
	}
}
`

func TagsAdd(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	tag string,
) (data_ *TagsAddResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "TagsAdd",
		Query:  TagsAdd_Operation,
		Variables: &__TagsAddInput{
			Id:  id,
			Tag: tag,
		},
	}

	data_ = &TagsAddResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
