mutation TagsAdd($id: ID!, $tag: String!) {
    tagsAdd(id: $id, tags: [$tag]) {
        userErrors {
            message
        }
    }
}

mutation TagsRemove($id: ID!, $tag: String!) {
    tagsRemove(id: $id, tags: [$tag]){
        userErrors {
            message
        }
    }
}

mutation DraftOrderUpdate($id: ID!, $input: DraftOrderInput!) {
    draftOrderUpdate(id: $id, input: $input){
        draftOrder {
            id
        }
        userErrors {
            field
            message
        }
    }
}

mutation DraftOrderComplete($id: ID!) {
    draftOrderComplete(id: $id){
        draftOrder {
            id
            name
            order {
                id
                name
            }
        }
        userErrors {
            field
            message
        }
    }
}

mutation MetaDataAdd($ownerId: ID!, $namespace: String!, $key: String!, $value: String!) {
    metafieldsSet(metafields: [
        {
            ownerId: $ownerId,
            namespace: $namespace,
            type: "json"
            key: $key,
            value: $value
        }
    ]){
        metafields {
            id
        }
        userErrors {
            field
            code
        }
    }
}

query GetFulfillment($id: ID!) {
    fulfillment(id: $id) {
        status
    }
}

query GetFulfillmentOrder($id: ID!) {
    fulfillmentOrder(id: $id) {
        fulfillments(first: 20) {
            nodes {
                id
                status
            }
        }
    }
}

query OrderDetailById($id: ID!) {
    order(id: $id) {
        id
        email
        name
        note
        phone
        shippingLine {
            title
        }
        transactions {
            gateway
        }
        totalPriceSet {
            presentmentMoney {
                amount
                currencyCode
            }
            shopMoney {
                amount
                currencyCode
            }
        }
        currentTotalPriceSet {
            presentmentMoney {
                amount
                currencyCode
            }
            shopMoney {
                amount
                currencyCode
            }
        }
        fulfillmentOrders(first: 10, query: "status:OPEN OR status:CLOSED") {
            nodes {
                id
                status
                lineItems(first: 20) {
                    nodes {
                        requiresShipping
                        productTitle
                        variantTitle
                        sku
                        totalQuantity
                        originalUnitPriceSet {
                            presentmentMoney {
                                amount
                                currencyCode
                            }
                            shopMoney {
                                amount
                                currencyCode
                            }
                        }
                        weight {
                            unit
                            value
                        }
                    }
                }
                assignedLocation {
                    name
                    phone
                    address1
                    address2
                    city
                    province
                    countryCode
                    zip
                    location {
                        id
                    }
                }
                destination {
                    address1
                    address2
                    city
                    company
                    province
                    countryCode
                    firstName
                    lastName
                    zip
                    phone
                    email
                }
                fulfillments(first: 1) {
                    nodes {
                        status
                        id
                        service {
                            type
                        }
                    }
                }
            }
        }
        customAttributes {
            key
            value
        }
    }
}

query GetOrders($query: String) {
    orders(first: 50, sortKey: CREATED_AT, reverse: false, query: $query){
        nodes {
            id
            name
            email
            phone
        }
    }
}

query GetOrder($orderId: ID!) {
    order(id: $orderId) {
        id
        name
        lineItems(first: 100) {
            nodes {
                id
                sku
                name
                quantity
            }
        }
    }
}

query GetDraftOrders($query: String) {
    draftOrders(first: 50, sortKey: UPDATED_AT, reverse: false, query: $query) {
        nodes {
            id
            name
            email
            phone
        }
    }
}

query GetDraftOrderMetaField($id: ID!, $namespace: String!, $key: String!) {
    draftOrder(id: $id){
        metafield(namespace: $namespace, key: $key){
            id
            value
        }
    }
}

query GetDraftOrder($id: ID!) {
    draftOrder(id: $id){
        id
        name
        email
        phone
        paymentTerms {
            id
        }
        purchasingEntity  {
            ... on Customer {
                id
            }
        }
        lineItems (first: 100) {
            nodes {
                id
                quantity
                sku
                title
                variant {
                    id
                    title
                    sku
                    price
                    image {
                        url
                    }
                }
            }
        }
    }
}

mutation CreateCustomer($input: CustomerInput!) {
    customerCreate(input: $input) {
        customer {
            id
        }
        userErrors {
            field
            message
        }
    }
}

query GetCustomer($query: String!) {
    customers(first: 1, query: $query) {
        nodes {
            id
            firstName
            lastName
        }
    }
}

query GetProductsSelfService {
    products(first: 50) {
        edges {
            node {
                id
                description
                title
                priceRangeV2 {
                    minVariantPrice {
                        amount
                    }
                    maxVariantPrice {
                        amount
                    }
                }
                media(first: 1) {
                    nodes {
                        preview {
                            image {
                                url
                            }
                        }
                    }
                }

            }
        }
    }
}

query GetProduct($id: ID!) {
    product(id: $id) {
        description
        variants(first: 100) {
            nodes {
                id
                title
                sku
                price
                image {
                    url
                }
            }
        }
        priceRangeV2 {
            minVariantPrice {
                amount
            }
            maxVariantPrice {
                amount
            }
        }
        media(first: 10) {
            nodes {
                preview {
                    image {
                        url
                    }
                }
            }
        }
    }
}